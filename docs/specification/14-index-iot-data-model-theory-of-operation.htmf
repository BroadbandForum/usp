<!-- <h1 class="appendix1 display-none" id="sec:iot-data-model-theory-of-operation">Appendix V: IoT Data Model Theory of Operation<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:iot-data-model-theory-of-operation" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h1> -->

<h2 class="appendix2" id="sec:introduction-2">V.1 Introduction<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:introduction-2" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h2>

<p>Since there are thousands of different Internet of Things (IoT) devices, the data model needs a flexible modular way to support them using generic building block templates. To achieve this, an IoT device is represented in the data model by sensor and control capabilities:</p>

<ul>
<li>Sensor capabilities, which allow reading a state, e.g. a temperature value, a battery level, a light color, etc.</li>
<li>Control capabilities, which allow changing a value, e.g. set a temperature, switch a light etc.</li>
</ul>

<p>The Device:2 Data Model <span class="cite" data-citation-ids="TR-181"><a href='01-index-introduction.html#ref-TR-181' title=''>[38]</a></span> defines capability Objects that reflect capabilities found on many different devices (example: BinaryControl). By using these Objects, a large ecosystem of devices can be described using a small set of capabilities (see table below).</p>

<h2 class="appendix2" id="sec:iot-data-model-overview">V.2 IoT data model overview<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:iot-data-model-overview" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h2>

<p>The figure shows the overall structure of the IoT data model:</p>

<figure>
<img src="extensions/iot/./figure-73.png" id="fig:iot-data-model" alt=""/>
<figcaption>Figure 28: IoT Data Model<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#fig:iot-data-model" title="Permalink to this figure"> <img src='permalink.png' title='' width="0.8em"/></a></figcaption>
</figure>

<p>The data model defines an IoT Capability table, whose instances describe the IoT device’s exposed capabilities. The capability table can appear directly under the <code>Device.</code> Object (if the IoT device hosts a USP Agent) or under a <code>Device.ProxiedDevice.{i}.</code> or <code>Device.ProxiedDevice.{i}.Node.{i}.</code> instance.</p>

<h3 class="appendix3" id="sec:iot-capability-table">V.2.1 IoT Capability table<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:iot-capability-table" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>A capability is represented in the <code>Device.IoTCapability.</code> table as a generic Object Instance with a specific class, and an instantiated Sub-Object depending on this class. The class name is defined by the Sub-Object name in a <code>Class</code> Parameter for each IoT Capability table entry, to allow the Controller to detect the instantiated Sub-Object.</p>

<p>Only one out of the following Sub-Objects can exist per instance:</p>

<table>
<tr class="header">
<th align="left">Capability Sub-Object</th>
<th align="left">Description</th>
</tr>
<tr class="odd">
<td align="left"><code>BinaryControl</code></td>
<td align="left">Allows setting a binary value (e.g. on or off)</td>
</tr>
<tr class="even">
<td align="left"><code>LevelControl</code></td>
<td align="left">Allows setting a continuous value in a predefined range</td>
</tr>
<tr class="odd">
<td align="left"><code>EnumControl</code></td>
<td align="left">Allows setting a value from a predefined set of values</td>
</tr>
<tr class="even">
<td align="left"><code>BinarySensor</code></td>
<td align="left">Provides a binary reading value (true/false)</td>
</tr>
<tr class="odd">
<td align="left"><code>LevelSensor</code></td>
<td align="left">Provides a continuous reading value</td>
</tr>
<tr class="even">
<td align="left"><code>MultiLevelSensor</code></td>
<td align="left">Provides multiple reading values, which belong together</td>
</tr>
</table>

<p>Each IoT capability Sub-Object has a <code>Type</code> Parameter to identify the functionality the capability is representing. See the <a href='14-index-iot-data-model-theory-of-operation.html#sec:type-definition' title='' class="heading">Type definition</a> section for details.</p>

<h3 class="appendix3" id="sec:node-object-table">V.2.2 Node Object table<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:node-object-table" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>The <code>Device.Node.{i}.</code> and <code>Device.ProxiedDevice.{i}.Node.{i}.</code> Objects are mount points that provide the ability to support complex devices - that is, a group of capabilities. Each node is a container for a group of device capabilities that have a direct relationship with each other (sub-device) and a hierarchal relationship with the top-level. A node may have the same capabilities as the top-level, but applicable only for the node, with no impact to the top-level. Capabilities for the top-level node may have an effect on the lower level nodes, such as power.</p>

<h2 class="appendix2" id="sec:architecture-mappings">V.3 Architecture mappings<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:architecture-mappings" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h2>

<h3 class="appendix3" id="sec:individual-iot-devices">V.3.1 Individual IoT devices<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:individual-iot-devices" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>Stand-alone IoT devices, which are capable of supporting their own USP Agent, provide their own data models, which expose the IoT sensor and control capabilities of the device:</p>

<figure>
<img src="extensions/iot/./figure-74.png" id="fig:iot-individual-device-models" alt=""/>
<figcaption>Figure 29: IoT individual device models<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#fig:iot-individual-device-models" title="Permalink to this figure"> <img src='permalink.png' title='' width="0.8em"/></a></figcaption>
</figure>

<p>Each device registers as an individual entity to the USP Controller. With the help of <code>Node</code> Objects, the capabilities can be additionally structured (not shown in the picture).</p>

<h3 class="appendix3" id="sec:proxied-iot-devices">V.3.2 Proxied IoT devices<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:proxied-iot-devices" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>IoT devices connected over a proxy protocol (e.g. ZigBee) with an IoT control device hosting the USP Agent are modeled as proxied devices (i.e., using the <code>Device.ProxiedDevice.</code> table) in the data model of the control device’s USP Agent:</p>

<figure>
<img src="extensions/iot/./figure-75.png" id="fig:iot-proxied-device-model" alt=""/>
<figcaption>Figure 30: IoT proxied device model<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#fig:iot-proxied-device-model" title="Permalink to this figure"> <img src='permalink.png' title='' width="0.8em"/></a></figcaption>
</figure>

<p>Each IoT device is represented as a <code>Device.ProxiedDevice.{i}.</code> instance in the data model of the control device, which exposes its IoT capabilities in the corresponding Objects. The capabilities can be additionally structured with the help of <code>Node</code> Object (not shown in the picture).</p>

<h2 class="appendix2" id="sec:iot-data-model-object-details">V.4 IoT data model Object details<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:iot-data-model-object-details" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h2>

<h3 class="appendix3" id="sec:common-capability-parameters">V.4.1 Common capability Parameters<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:common-capability-parameters" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>These Parameters have the same behavior for all capability Sub-Objects, where defined.</p>

<h4 class="appendix4" id="sec:type-definition">V.4.1.1 Type definition<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:type-definition" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p><strong>Applies to:</strong> All capability Sub-Objects</p>

<p>All capability Objects contain a mandatory <code>Type</code> enumeration value.</p>

<p>The <code>Type</code> value is a predefined enumeration value with the goal of giving a unified description of the capability Object. If the <code>Type</code> value requires further detail, the <code>Description</code> Parameter may provided a further definition.</p>

<p><em>Note: The <code>Type</code> enumeration in the data model can also, like all Parameters, be extended using the rules defined in TR-106 <span class="cite" data-citation-ids="TR-106"><a href='01-index-introduction.html#ref-TR-106' title=''>[37]</a></span>.</em></p>

<h4 class="appendix4" id="sec:unit-definition">V.4.1.2 Unit definition<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:unit-definition" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p><strong>Applies to:</strong> LevelControl, LevelSensor, MultilevelSensor</p>

<p>To define the used unit a similar concept as for the type definition is used. The definition consists of the <code>Unit</code> enumeration value.</p>

<p>The <code>Unit</code> value is a predefined enumeration value with the goal of giving a unified representation of the used unit.</p>

<p><em>Note: The <code>Unit</code> enumeration in the data model can also, like all Parameters, be extended using the rules defined in TR-106 <span class="cite" data-citation-ids="TR-106"><a href='01-index-introduction.html#ref-TR-106' title=''>[37]</a></span>.</em></p>

<p><em>Note: Imperial units are intentionally not modeled in favor of the metric system to increase the inter-working. If the Controller needs imperial units, it can easily convert the metric units into imperial ones by using the well-defined conversion routines.</em></p>

<h3 class="appendix3" id="sec:control-objects">V.4.2 Control Objects<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:control-objects" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>Control Objects represent IoT capabilities that involve the manipulation of device or application states. They include Binary Controls, Level Controls, and Enumerated Controls.</p>

<h4 class="appendix4" id="sec:binarycontrol">V.4.2.1 BinaryControl<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:binarycontrol" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>The binary controller defines the simplest type of controller, which allows to switch between two values like true/false, on/off, full/empty, etc. Its value is modeled as a Boolean, which can be either <code>true</code> or <code>false</code>.</p>

<p>The minimum definition of a &ldquo;BinaryControl&rdquo; consists of:</p>

<pre><code>    IoTCapability.i.Class               = "BinaryControl"
    IoTCapability.i.BinaryControl.Type  = ...
    IoTCapability.i.BinaryControl.Value = ...</code></pre>

<p>The value can be changed either directly by a USP Set operation, or via The <code>Toggle()</code> command, which corresponds to the behavior of a switch, changing the value to the other state.</p>

<h4 class="appendix4" id="sec:levelcontrol">V.4.2.2 LevelControl<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:levelcontrol" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>The level controller capability allows a continuous change of a value within a predefined range. Its capabilities are defined by these three mandatory Parameters:</p>

<ul>
<li><code>Unit</code> - The unit used for the value</li>
<li><code>MinValue</code> - The minimum value the value can be set</li>
<li><code>MaxValue</code> - The maximum value the value can be set</li>
</ul>

<p>Implementations have to provide the minimum and maximum values to allow the controller to detect what values can be applied.</p>

<p>The minimum definition of a &ldquo;LevelControl&rdquo; consists of:</p>

<pre><code>    IoTCapability.i.Class                 = "LevelControl"
    IoTCapability.i.LevelControl.Type     = ...
    IoTCapability.i.LevelControl.Unit     = ...
    IoTCapability.i.LevelControl.MinValue = ...
    IoTCapability.i.LevelControl.MaxValue = ...
    IoTCapability.i.LevelControl.Value    = ...</code></pre>

<p>The value can be changed either directly by a USP Set operation, or via the step commands.</p>

<p>If the <code>StepUp()</code> command and/or the <code>StepDown()</code> command are implemented, the <code>StepValue</code> Parameter has to be implemented, which indicates the amount of change triggered by a step command. If resulting value of a step command would exceed the defined range, the operation does not result in a failure - instead, the result is set to the range limit value.</p>

<p>For example, if a temperature range is defined from 5.5 degC to 25 degC with a step value of 1 degC, a step down from 6 degC would result in 5.5 degC and not in 5 degC.</p>

<p>Additionally, if the lowest possible value is already set, a <code>StepDown()</code> will not change the current value, since the defined minimum range would be exceeded. The same also applies to the maximum value and <code>StepUp()</code> command.</p>

<h4 class="appendix4" id="sec:enumcontrol">V.4.2.3 EnumControl<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:enumcontrol" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>The enumeration controller capability allows setting one of a set of predefined values. Examples are mode selections, with more than two modes. If only two values exist, the binary controller Object is preferred.</p>

<p>The minimum definition of an &ldquo;EnumControl&rdquo; consists of:</p>

<pre><code>    IoTCapability.i.Class                   = "EnumControl"
    IoTCapability.i.EnumControl.Type        = ...
    IoTCapability.i.EnumControl.ValidValues = &lt;list of possible values&gt;
    IoTCapability.i.EnumControl.Value       = &lt;current value&gt;</code></pre>

<p>The value can be changed either directly by a USP Set operation, or via the step commands.</p>

<p>The step commands will cycle through the value range, meaning that if the last valid value is reached, the next <code>StepUp()</code> command will select the first value of the valid values and vice versa for the <code>StepDown()</code> command. The valid values are stored in the Parameter <code>ValidValues</code> as a comma-separated list; that order of the list will be followed by the step commands.</p>

<p>It is possible to implement only one of the step commands, if only one direction is needed.</p>

<h3 class="appendix3" id="sec:sensor-objects">V.4.3 Sensor Objects<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:sensor-objects" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>Sensor Objects represent IoT capabilities that involve reading or reporting on a device or application state. They include Binary Sensors, Level Sensors, and Enumerated Sensors, along with support for thresholds and triggering events.</p>

<h4 class="appendix4" id="sec:binary-sensor">V.4.3.1 Binary Sensor<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:binary-sensor" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>The binary sensor Object Instance supports different kinds of binary sensor operations:</p>

<ul>
<li>Simple binary state, e.g. a door or window state</li>
<li>Threshold trigger, e.g. trigger a Carbon Dioxide Alarm if a certain threshold is exceeded.</li>
<li>Repeated trigger with grace period, e.g. movement detector.</li>
</ul>

<h5 class="appendix5" id="sec:simple-binary-state-sensor">V.4.3.1.1 Simple binary state sensor<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:simple-binary-state-sensor" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h5>

<p>To model a simple sensor, which changes between two distinct states (e.g. a window or door open/close sensor), only the <code>Value</code> Parameter is needed.</p>

<p>The minimum definition of a BinarySensor consists of:</p>

<pre><code>    IoTCapability.i.Class              = "BinarySensor"
    IoTCapability.i.BinarySensor.Type  = ...
    IoTCapability.i.BinarySensor.Value = {true/false}</code></pre>

<p>The values of <code>true</code> and <code>false</code> represent the two possible <code>Value</code> states. Each time the state changes the value toggles.</p>

<p>For example, a motion sensor would be modeled as:</p>

<pre><code>    IoTCapability.i.Class              = "BinarySensor"
    IoTCapability.i.BinarySensor.Type  = "MotionDetected"
    IoTCapability.i.BinarySensor.Value = true</code></pre>

<p>Note that binary sensor types are meaningful for binary state behavior, e.g., &ldquo;WindowOpen&rdquo; rather than &ldquo;Window&rdquo;.</p>

<h5 class="appendix5" id="sec:threshold-trigger-sensor">V.4.3.1.2 Threshold trigger sensor<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:threshold-trigger-sensor" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h5>

<p>To model a sensor, which additionally triggers on a certain threshold, add the <code>Sensitivity</code> Parameter to the definition:</p>

<pre><code>    IoTCapability.1.Class                    = "BinarySensor"
    IoTCapability.1.BinarySensor.Type        = "CarbonDioxideDetected"
    IoTCapability.1.BinarySensor.Value       = {true/false}
    IoTCapability.1.BinarySensor.Sensitivity = 50</code></pre>

<p>With the <code>Sensitivity</code> Parameter, the threshold is controlled. As soon as the measured value exceeds the threshold, the <code>Value</code> Parameter is set to <code>true</code>. As soon as the measured value goes below the threshold the <code>Value</code> Parameter is set to <code>false</code>.</p>

<figure>
<img src="extensions/iot/./figure-76.png" id="fig:iot-threshold-trigger-sensitivity" alt=""/>
<figcaption>Figure 31: IoT threshold trigger sensitivity<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#fig:iot-threshold-trigger-sensitivity" title="Permalink to this figure"> <img src='permalink.png' title='' width="0.8em"/></a></figcaption>
</figure>

<p>The sensitivity value is a relative value in the range 0 to 100 percent. The exact meaning depends on the implementation.</p>

<h5 class="appendix5" id="sec:trigger-time-control">V.4.3.1.3 Trigger time control<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:trigger-time-control" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h5>

<p>If the sensor state, after being triggered, should stay active for a minimum period, the <code>HoldTime</code> Parameter is used:</p>

<pre><code>    IoTCapability.1.Class                    = "BinarySensor"
    IoTCapability.1.BinarySensor.Type        = "CarbonDioxideDetected"
    IoTCapability.1.BinarySensor.Value       = {true/false}
    IoTCapability.1.BinarySensor.Sensitivity = 50
    IoTCapability.1.BinarySensor.HoldTime    = 5000</code></pre>

<p>This figure shows the effect of the <code>HoldTime</code> Parameter on the resulting value:</p>

<figure>
<img src="extensions/iot/./figure-77.png" id="fig:iot-threshold-trigger-hold-time" alt=""/>
<figcaption>Figure 32: IoT threshold trigger hold time<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#fig:iot-threshold-trigger-hold-time" title="Permalink to this figure"> <img src='permalink.png' title='' width="0.8em"/></a></figcaption>
</figure>

<p>If the <code>HoldTime</code> Parameter is not implemented or is set to <code>0</code>, the handling is disabled.</p>

<h5 class="appendix5" id="sec:repeated-trigger-with-grace-period">V.4.3.1.4 Repeated trigger with grace period<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:repeated-trigger-with-grace-period" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h5>

<p>Some sensors might produce too many triggers, e.g. continuous movement, when only one trigger in a specific time period is needed. To filter these the <code>RestTime</code> Parameter is used:</p>

<pre><code>    IoTCapability.1.Class                    = "BinarySensor"
    IoTCapability.1.BinarySensor.Type        = "CarbonDioxideDetected"
    IoTCapability.1.BinarySensor.Value       = {true/false}
    IoTCapability.1.BinarySensor.Sensitivity = 50
    IoTCapability.1.BinarySensor.RestTime    = 10000</code></pre>

<p>With this setting, new trigger events are ignored for 10 seconds (10000 miliseconds) after the first trigger has been detected, resulting in the following pattern:</p>

<figure>
<img src="extensions/iot/./figure-78.png" id="fig:iot-threshold-trigger-rest-time" alt=""/>
<figcaption>Figure 33: IoT threshold trigger rest time<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#fig:iot-threshold-trigger-rest-time" title="Permalink to this figure"> <img src='permalink.png' title='' width="0.8em"/></a></figcaption>
</figure>

<p>If the <code>RestTime</code> Parameter is not implemented or is set to <code>0</code>, the handling is disabled.</p>

<h5 class="appendix5" id="sec:repeated-trigger-with-minimum-duration">V.4.3.1.5 Repeated trigger with minimum duration<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:repeated-trigger-with-minimum-duration" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h5>

<p>To get readings with a minimum duration, combine rest and hold times:</p>

<pre><code>    IoTCapability.1.Class                    = "BinarySensor"
    IoTCapability.1.BinarySensor.Type        = "CarbonDioxideDetected"
    IoTCapability.1.BinarySensor.Value       = {true/false}
    IoTCapability.1.BinarySensor.Sensitivity = 50
    IoTCapability.1.BinarySensor.HoldTime    = 5000
    IoTCapability.1.BinarySensor.RestTime    = 10000</code></pre>

<p>Which results in the following pattern:</p>

<figure>
<img src="extensions/iot/./figure-79.png" id="fig:iot-threshold-trigger-minimum-duration" alt=""/>
<figcaption>Figure 34: IoT threshold trigger minimum duration<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#fig:iot-threshold-trigger-minimum-duration" title="Permalink to this figure"> <img src='permalink.png' title='' width="0.8em"/></a></figcaption>
</figure>

<h4 class="appendix4" id="sec:level-sensor">V.4.3.2 Level Sensor<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:level-sensor" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>The <code>LevelSensor</code> Object provides a template for modeling devices that report various levels. <code>LevelSensor</code> is used to reflect the functionality of a sensor that reports a level in units and supports different kinds of sensor operation:</p>

<ul>
<li>Level reading</li>
<li>Additional Threshold trigger: e.g., a Battery Alarm is triggered.</li>
</ul>

<h5 class="appendix5" id="sec:level-reading">V.4.3.2.1 Level reading<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:level-reading" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h5>

<p>To model a level reading, the reading value and its unit are defined.
The minimum definition of a <code>LevelSensor</code> consists of:</p>

<pre><code>    IoTCapability.i.Class             = "LevelSensor"
    IoTCapability.i.LevelSensor.Type  = ...
    IoTCapability.i.LevelSensor.Unit  = ...
    IoTCapability.i.LevelSensor.Value = ...</code></pre>

<p>For example, to show the remaining load of a battery in percent, this capability would have the following values:</p>

<pre><code>    IoTCapability.1.Class             = "LevelSensor"
    IoTCapability.1.LevelSensor.Type  = "Battery"
    IoTCapability.1.LevelSensor.Unit  = "%"
    IoTCapability.1.LevelSensor.Value = 63"</code></pre>

<p>With this definition, the remaining load is expressed in percent, here 63 percent.
Since the unit value is a decimal type it is also possible to specify fractions for the value:</p>

<pre><code>    IoTCapability.1.Class = "LevelSensor"
    IoTCapability.1.LevelSensor.Type  = "Battery"
    IoTCapability.1.LevelSensor.Unit  = "%"
    IoTCapability.1.LevelSensor.Value = 63.26</code></pre>

<p>This expresses a total remaining load of 63.26 percent.</p>

<h5 class="appendix5" id="sec:threshold-trigger">V.4.3.2.2 Threshold trigger<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:threshold-trigger" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h5>

<p>In cases where not only the actual value is of interest, but also important to know if a predefined threshold is reached or undershot, the <code>LevelSensor</code> Object can be extended with threshold Parameters. Once the <code>LowLevel</code> or <code>HighLevel</code> Parameter is <code>true</code>, it will remain <code>true</code> until the device is reset or the condition no longer exists. This will depend on the particular device.</p>

<table>
<col width="28%" />
<col width="10%" />
<col width="6%" />
<col width="56%" />
<tr class="header">
<th align="left">Parameter</th>
<th align="left">Type</th>
<th align="left">R/W</th>
<th align="left">Description</th>
</tr>
<tr class="odd">
<td align="left"><code>LowLevel</code></td>
<td align="left">boolean</td>
<td align="left">R</td>
<td align="left">True means that the low level threshold is reached or undershot.</td>
</tr>
<tr class="even">
<td align="left"><code>LowLevelThreshold</code></td>
<td align="left">decimal</td>
<td align="left">R/W</td>
<td align="left">The defined low level value.</td>
</tr>
<tr class="odd">
<td align="left"><code>HighLevel</code></td>
<td align="left">boolean</td>
<td align="left">R</td>
<td align="left">True means that the high level threshold is reached or exceeded.</td>
</tr>
<tr class="even">
<td align="left"><code>HighLevelThreshold</code></td>
<td align="left">decimal</td>
<td align="left">R/W</td>
<td align="left">The defined high level value.</td>
</tr>
</table>

<p>Table 17 – IoT LevelSensor threshold Parameters</p>

<p>When modeling a battery with a <code>LevelSensor</code> Object, an additional low level warning (Boolean) may be supported along with a Low Level threshold that provides a setting for the warning. The resulting Object looks like this:</p>

<pre><code>    IoTCapability.1.Class                         = "LevelSensor"
    IoTCapability.1.LevelSensor.Type              = "Battery"
    IoTCapability.1.LevelSensor.Unit              = "%"
    IoTCapability.1.LevelSensor.LowLevelThreshold = 20
    IoTCapability.1.LevelSensor.Value             = 19
    IoTCapability.1.LevelSensor.LowLevel          = true</code></pre>

<p><em>Note: For more complex scenarios, like having a grace period, the binary sensor Object can be used instead of the LowLevel or HighLevel Threshold Parameters.</em></p>

<h5 class="appendix5" id="sec:multi-level-sensor">V.4.3.2.3 Multi Level Sensor<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:multi-level-sensor" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h5>

<p>A <code>MultiLevelSensor</code> instance models sensors, which provide a set of related values with the same unit.</p>

<p>The minimum definition of a &ldquo;MultiLevelSensor&rdquo; consists of:</p>

<pre><code>    IoTCapability.i.Class                   = "MultiLevelSensor"
    IoTCapability.i.MultiLevelSensor.Type   = ...
    IoTCapability.i.MultiLevelSensor.Unit   = ...
    IoTCapability.i.MultiLevelSensor.Values = ...
    IoTCapability.1.MultiLevelSensor.ValueNames = ...</code></pre>

<p>An example is a location reading consisting of the two values longitude and latitude in decimal degree notation, which have to be read together:</p>

<pre><code>    IoTCapability.1.Class                       = "MultiLevelSensor"
    IoTCapability.1.MultiLevelSensor.Type       = "Location"
    IoTCapability.1.MultiLevelSensor.Unit       = "deg"
    IoTCapability.1.MultiLevelSensor.Values     = "48.1372056,11.57555"
    IoTCapability.1.MultiLevelSensor.ValueNames = "Latitude,Longitude"</code></pre>

<p>This example uses the Parameter <code>ValueNames</code> to provide information about the individual value meanings.</p>

<h4 class="appendix4" id="sec:enum-sensor">V.4.3.3 Enum Sensor<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:enum-sensor" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>An <code>EnumSensor</code> instance provides a reading value from a predefined set of values. This allows modeling of sensors, which can output discreet values from a predefined set.</p>

<p>The minimum definition of an &ldquo;EnumSensor&rdquo; consists of:</p>

<pre><code>    IoTCapability.i.Class                  = "EnumSensor"
    IoTCapability.i.EnumSensor.Type        = ...
    IoTCapability.i.EnumSensor.Unit        = ...
    IoTCapability.i.EnumSensor.ValidValues = ...
    IoTCapability.i.EnumSensor.Value       = ...</code></pre>

<p>The <code>ValidValues</code> Parameter determines the set of values, which will be delivered by the sensor.</p>

<p>For example, a traffic light could be modeled as:</p>

<pre><code>    IoTCapability.1.Class                  = "EnumSensor"
    IoTCapability.1.EnumSensor.Type        = "X_&lt;oui&gt;_TrafficLight"
    IoTCapability.1.EnumSensor.ValidValues = "Red, Yellow, Green"
    IoTCapability.1.EnumSensor.Value       = "Green"</code></pre>

<h2 class="appendix2" id="sec:examples">V.5 Examples<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:examples" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h2>

<p>This chapter gives several examples how to model IoT Devices.</p>

<h3 class="appendix3" id="sec:example-ac-thermostat">V.5.1 Example: A/C Thermostat<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:example-ac-thermostat" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>This example shows an A/C Thermostat connected over Z-Wave as a proxied device of an IoT Gateway:</p>

<p>Structure elements:</p>

<ul>
<li>IoTCapability.1 (EnumControl) : Operation Mode</li>
<li>IoTCapability.2 (LevelControl) : Cool Temperature in range from 14 to 25 degC</li>
<li>IoTCapability.3 (LevelControl) : Heat Temperature in range from 14 to 25 degC</li>
<li>IoTCapability.4 (LevelControl) : Energy Saving Cool Temperature in range from 14 to 25 degC</li>
<li>IoTCapability.5 (LevelControl) : Energy Saving Heat Temperature in range from 14 to 25 degC</li>
<li>IoTCapability.6 (LevelSensor) : Current Temperature</li>
<li>IoTCapability.7 (EnumControl) : Fan Mode Control</li>
<li>IoTCapability.8 (EnumSensor) : Current Fan Operating State</li>
</ul>

<p>Instantiated data model:</p>

<pre><code>    ProxiedDevice.1.Type                                    = "Thermostat"
    ProxiedDevice.1.Online                                  = true
    ProxiedDevice.1.ProxyProtocol                           = "Z-Wave"

    ProxiedDevice.1.IoTCapabilityNumberOfEntries            = 9

    ProxiedDevice.1.IoTCapability.1.Class                   = "EnumControl"
    ProxiedDevice.1.IoTCapability.1.EnumControl.Type        = "ThermostatMode"
    ProxiedDevice.1.IoTCapability.1.EnumControl.Value       = "Cool"
    ProxiedDevice.1.IoTCapability.1.EnumControl.ValidValues = "Heat, Cool,
                                                              Energy_heat,
                                                              Energy_cool, Off,
                                                              Auto"

    ProxiedDevice.1.IoTCapability.2.Class                   = "LevelControl"
    ProxiedDevice.1.IoTCapability.2.LevelControl.Type       = "Temperature"
    ProxiedDevice.1.IoTCapability.2.LevelControl.Description = "TargetCoolTemperature"
    ProxiedDevice.1.IoTCapability.2.LevelControl.Value      = 17
    ProxiedDevice.1.IoTCapability.2.LevelControl.Unit       = "degC"
    ProxiedDevice.1.IoTCapability.2.LevelControl.MinValue   = 14
    ProxiedDevice.1.IoTCapability.2.LevelControl.MaxValue   = 25

    ProxiedDevice.1.IoTCapability.3.Class                   = "LevelControl"
    ProxiedDevice.1.IoTCapability.3.LevelControl.Type       = "Temperature"
    ProxiedDevice.1.IoTCapability.3.LevelControl.Description = "TargetHeatTemperature"
    ProxiedDevice.1.IoTCapability.3.LevelControl.Value      = 21
    ProxiedDevice.1.IoTCapability.3.LevelControl.Unit       = "degC"
    ProxiedDevice.1.IoTCapability.3.LevelControl.MinValue   = 14
    ProxiedDevice.1.IoTCapability.3.LevelControl.MaxValue   = 25

    ProxiedDevice.1.IoTCapability.4.Class                   = "LevelControl"
    ProxiedDevice.1.IoTCapability.4.LevelControl.Type       = "Temperature"
    ProxiedDevice.1.IoTCapability.4.LevelControl.Description = "TargetEnergyCoolTemp"
    ProxiedDevice.1.IoTCapability.4.LevelControl.Value      = 19
    ProxiedDevice.1.IoTCapability.4.LevelControl.Unit       = "degC"
    ProxiedDevice.1.IoTCapability.4.LevelControl.MinValue   = 14
    ProxiedDevice.1.IoTCapability.4.LevelControl.MaxValue   = 25

    ProxiedDevice.1.IoTCapability.5.Class                   = "LevelControl"
    ProxiedDevice.1.IoTCapability.5.LevelControl.Type       = "Temperature"
    ProxiedDevice.1.IoTCapability.5.LevelControl.Description = "TargetEnergyHeatTemp"
    ProxiedDevice.1.IoTCapability.5.LevelControl.Value      = 19
    ProxiedDevice.1.IoTCapability.5.LevelControl.Unit       = "degC"
    ProxiedDevice.1.IoTCapability.5.LevelControl.MinValue   = 14
    ProxiedDevice.1.IoTCapability.5.LevelControl.MaxValue   = 25

    ProxiedDevice.1.IoTCapability.6.Class                   = "LevelSensor"
    ProxiedDevice.1.IoTCapability.6.LevelSensor.Type        = "Temperature"
    ProxiedDevice.1.IoTCapability.6.LevelSensor.Value       = 19.5
    ProxiedDevice.1.IoTCapability.6.LevelSensor.Unit        = "degC"

    ProxiedDevice.1.IoTCapability.7.Class                   = "EnumControl"
    ProxiedDevice.1.IoTCapability.7.EnumControl.Type        = "FanMode"
    ProxiedDevice.1.IoTCapability.7.EnumControl.Value       = "Low"
    ProxiedDevice.1.IoTCapability.7.EnumControl.ValidValues = "Auto_low, Low,
                                                              Circulation, Off"

    ProxiedDevice.1.IoTCapability.8.Class                   = "EnumSensor"
    ProxiedDevice.1.IoTCapability.8.EnumSensor.Type         = "OperatingState"
    ProxiedDevice.1.IoTCapability.8.EnumSensor.Value        = "Cooling"
    ProxiedDevice.1.IoTCapability.8.EnumSensor.ValidValues  =
                "Heating, Cooling,
                FanOnly, PendingHeat, PendingCool, VentEconomizer,
                AuxHeating, 2ndStageHeating, 2ndStageCooling,
                2ndStageAuxHeat, 3rdStageAuxHeat"</code></pre>

<h3 class="appendix3" id="sec:example-light-with-a-dimmer-and-switch">V.5.2 Example: Light with a dimmer and switch<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:example-light-with-a-dimmer-and-switch" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>This example shows a dimmable light connected over Z-Wave as proxied device to an IoT Gateway.</p>

<p>Structure elements:</p>

<ul>
<li>IoTCapability.1 (BinaryControl) : On/Off Switch, expressed as <code>true</code> and <code>false</code> value</li>
<li>IoTCapability.2 (LevelControl) : Brightness control from 0% to 100%</li>
</ul>

<p>Instantiated data model:</p>

<pre><code>    ProxiedDevice.2.Type                                      = "Light"
    ProxiedDevice.2.Online                                    = "true"
    ProxiedDevice.2.ProxyProtocol                             = "Z-Wave"
    ProxiedDevice.2.Name                                      = "GE DimMing Bulb"
    ProxiedDevice.2.IoTCapabilityNumberOfEntries              = 2

    ProxiedDevice.2.IoTCapability.1.Class                     = "BinaryControl"
    ProxiedDevice.2.IoTCapability.1.BinaryControl.Type        = "Switch"
    ProxiedDevice.2.IoTCapability.1.BinaryControl.Value       = true

    ProxiedDevice.2.IoTCapability.2.Class                     = "LevelControl"
    ProxiedDevice.2.IoTCapability.2.LevelControl.Type         = "Brightness"
    ProxiedDevice.2.IoTCapability.2.LevelControl.Value        = 100
    ProxiedDevice.2.IoTCapability.2.LevelControl.Min          = 0
    ProxiedDevice.2.IoTCapability.2.LevelControl.Max          = 100
    ProxiedDevice.2.IoTCapability.2.LevelControl.Unit         = "%"</code></pre>

<h3 class="appendix3" id="sec:example-fan">V.5.3 Example: Fan<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:example-fan" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>This example shows a simple fan connected over Z-Wave as proxied device to an IoT Gateway.</p>

<p>Structure elements:</p>

<ul>
<li>IoTCapability.1 (EnumControl) : Fan state</li>
</ul>

<p>Instantiated data model:</p>

<pre><code>    ProxiedDevice.3.Type                                       = "Fan"
    ProxiedDevice.3.Online                                     = "true"
    ProxiedDevice.3.ProxyProtocol                              = "Z-Wave"
    ProxiedDevice.3.name                                       = "GE Fan"
    ProxiedDevice.3.IoTCapabilityNumberOfEntries               = 1

    ProxiedDevice.2.IoTCapability.1.Class                      = "EnumControl"
    ProxiedDevice.3.IoTCapability.1.EnumControl.Type           = "FanMode"
    ProxiedDevice.3.IoTCapability.1.EnumControl.Value          = "Off"
    ProxiedDevice.3.IoTCapability.1.EnumControlValidValues     =
                            "Off, Low, Medium, High, On, Auto, Smart"</code></pre>

<h3 class="appendix3" id="example-multi-sensor-strip-with-a-common-battery">V.5.4 Example: Multi-Sensor strip with a common battery.<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#example-multi-sensor-strip-with-a-common-battery" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>The sensors are inserted into the strip and may have their own power switch, battery, energy consumption and manufacturer.</p>

<p>Instantiated data model:</p>

<pre><code>    ProxiedDevice.4.Type                                             = "SensorStrip"
    ProxiedDevice.4.Online                                           = true
    ProxiedDevice.4.ProxyProtocol                                    = "Z-Wave"
    ProxiedDevice.4.Name                                             = "Insertable Sensor Strip"
    ProxiedDevice.4.IoTCapabilityNumberOfEntries                     = 1
    ProxiedDevice.4.NodeNumberOfEntries                              = 2

    ProxiedDevice.4.IoTCapability.1.Class                            = "LevelSensor"
    ProxiedDevice.4.IoTCapability.1.LevelSensor.Value                = 80
    ProxiedDevice.4.IoTCapability.1.LevelSensor.Unit                 = "%"
    ProxiedDevice.4.IoTCapability.1.LevelSensor.Type                 = "Battery"
    ProxiedDevice.4.IoTCapability.1.LevelSensor.LowLevelThreshold    = 30
    ProxiedDevice.4.IoTCapability.1.LevelSensor.LowLevel             = false

    ProxiedDevice.4.Node.1.Type                                      = "Sensor"
    ProxiedDevice.4.Node.1.IoTCapabilityNumberOfEntries              = 1

    ProxiedDevice.4.Node.1.IoTCapability.1.Class                     = "BinarySensor"
    ProxiedDevice.4.Node.1.IoTCapability.1.BinarySensor.HoldTime     = 0
    ProxiedDevice.4.Node.1.IoTCapability.1.BinarySensor.Sensitivity  = 5
    ProxiedDevice.4.Node.1.IoTCapability.1.BinarySensor.RestTime     = 10000
    ProxiedDevice.4.Node.1.IoTCapability.1.BinarySensor.Value        = false
    ProxiedDevice.4.Node.1.IoTCapability.1.BinarySensor.Type         = "MotionDetected"
    ProxiedDevice.4.Node.1.IoTCapability.1.BinarySensor.LastSensingTime  = 1573344000</code></pre>

<h3 class="appendix3" id="sec:example-ceiling-fan-with-integrated-light">V.5.5 Example: Ceiling Fan with integrated light<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:example-ceiling-fan-with-integrated-light" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>This example shows a ceiling fan with integrated light connected over Z-Wave as proxied device to an IoT Gateway.</p>

<p>Structure elements:</p>

<ul>
<li>IoTCapability.1 (BinaryControl) :</li>
<li>Node.1 : Represents the light control</li>
<li>.IoTCapability.1 (LevelControl) : Brightness control from 0% to 100%</li>
<li>.IoTCapability.2 (BinaryControl) : On/Off Switch, expressed as <code>true</code> and <code>false</code> value</li>
<li>Node.2 : Fan control</li>
<li>.IoTCapability.1 (EnumControl) : Set fan state</li>
</ul>

<p>Instantiated data model:</p>

<pre><code>    ProxiedDevice.5.Type                                           = "Fan"
    ProxiedDevice.5.Online                                         = true
    ProxiedDevice.5.ProxyProtocol                                  = "Z-Wave"
    ProxiedDevice.5.Name                                           = "42'' Ceiling Fan"

    ProxiedDevice.5.IoTCapabilityNumberOfEntries                   = 1
    ProxiedDevice.5.NodeNumberOfEntries                            = 2

    ProxiedDevice.5.IoTCapability.1.Class                          = "BinaryControl"
    ProxiedDevice.5.IoTCapability.1.BinaryControl.Type             = "Switch"
    ProxiedDevice.5.IoTCapability.1.BinaryControl.State            = true

    ProxiedDevice.5.Node.1.Type                                    = "Light"
    ProxiedDevice.5.Node.1.IoTCapabilityNumberOfEntries            = 2

    ProxiedDevice.5.Node.1.IoTCapability.1.Class                   = "LevelControl"
    ProxiedDevice.5.Node.1.IoTCapability.1.LevelControl.Type       = "Brightness"
    ProxiedDevice.5.Node.1.IoTCapability.1.LevelControl.Value      = 99
    ProxiedDevice.5.Node.1.IoTCapability.1.LevelControl.MinValue   = 0
    ProxiedDevice.5.Node.1.IoTCapability.1.LevelControl.MaxValue   = 100
    ProxiedDevice.5.Node.1.IoTCapability.1.LevelControl.Unit       = "%"

    ProxiedDevice.5.Node.1.IoTCapability.2.Class                   = "BinaryControl"
    ProxiedDevice.5.Node.1.IoTCapability.2.BinaryControl.Type      = "Switch"
    ProxiedDevice.5.Node.1.IoTCapability.2.BinaryControl.Value     = true

    ProxiedDevice.5.Node.2.Type                                    = "Fan"
    ProxiedDevice.5.Node.2.IoTCapabilityNumberOfEntries            = 1

    ProxiedDevice.5.Node.2.IoTCapability.1.Class                   = "EnumControl"
    ProxiedDevice.5.Node.2.IoTCapability.1.EnumControl.Type        = "FanMode"
    ProxiedDevice.5.Node.2.IoTCapability.1.EnumControl.Value       = "Off"
    ProxiedDevice.5.Node.2.IoTCapability.1.EnumControl.ValidValues = "Off, Low,
                                                                  Medium, High,
                                                                  Auto, Smart</code></pre>

<h3 class="appendix3" id="sec:example-power-strip">V.5.6 Example: Power strip<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:example-power-strip" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>This example shows a power strip with integrated power measurements connected over Z-Wave as proxied device to an IoT Gateway.</p>

<p>Structure elements:</p>

<ul>
<li>IoTCapability.1 (BinaryControl) : On/Off Switch for complete power strip</li>
<li>IoTCapability.2 (LevelSensor) : Total power reading of strip in KWh.</li>
<li>Node.1 - 3: Each node represents a power outlet with:

<ul>
<li>.IoTCapability.1 (BinaryControl) : On/Off Switch, expressed as <code>true</code> and <code>false</code> value</li>
<li>.IoTCapability.2 (LevelSensor) : Current power reading of outlet in Watt.</li>
<li>.IoTCapability.3 (LevelSensor) : Total used power reading of outlet in KWh.</li>
</ul></li>
</ul>

<p>Instantiated data model:</p>

<pre><code>    ProxiedDevice.6.Type                                         = "PowerStrip"
    ProxiedDevice.6.Online                                       = "true"
    ProxiedDevice.6.ProxyProtocol                                = "Z-Wave"
    ProxiedDevice.6.Name                                         = "3 Plug Strip"
    ProxiedDevice.6.IoTCapabilityNumberOfEntries                 = 2
    ProxiedDevice.6.NodeNumberOfEntries                          = 3

    ProxiedDevice.6.IoTCapability.1.Class                        = "BinaryControl"
    ProxiedDevice.6.IoTCapability.1.BinaryControl.Type           = "Switch"
    ProxiedDevice.6.IoTCapability.1.BinaryControl.Value          = true
    ProxiedDevice.6.IoTCapability.3.Class                        = "LevelSensor"
    ProxiedDevice.6.IoTCapability.3 Name                         = "Total Accumulated Power"
    ProxiedDevice.6.IoTCapability.3.LevelSensor.Type             = "Power"
    ProxiedDevice.6.IoTCapability.3.LevelSensor.Unit             = "KWh"
    ProxiedDevice.6.IoTCapability.3.LevelSensor.Value            = "2227,56"

    ProxiedDevice.6.Node.1.Type                                  = "Switch"
    ProxiedDevice.6.Node.1.IoTCapabilityNumberOfEntries          = 3
    ProxiedDevice.6.Node.1.IoTCapability.1.Class                 = "BinaryControl"
    ProxiedDevice.6.Node.1.IoTCapability.1.BinaryControl.Type    = "Switch"
    ProxiedDevice.6.Node.1.IoTCapability.1.BinaryControl.State   = true
    ProxiedDevice.6.Node.1.IoTCapability.2.Class                 = "LevelSensor"
    ProxiedDevice.6.Node.1.IoTCapability.2.LevelSensor.Type      = "Power"
    ProxiedDevice.6.Node.1.IoTCapability.2.LevelSensor.Unit      = "W"
    ProxiedDevice.6.Node.1.IoTCapability.2.LevelSensor.Value     = 99
    ProxiedDevice.6.Node.1.IoTCapability.3.Class                 = "LevelSensor"
    ProxiedDevice.6.Node.1.IoTCapability.3 Name                  = "Accumulated Power"
    ProxiedDevice.6.Node.1.IoTCapability.3.LevelSensor.Type      = "Power"
    ProxiedDevice.6.Node.1.IoTCapability.3.LevelSensor.Unit      = "KWh"
    ProxiedDevice.6.Node.1.IoTCapability.3.LevelSensor.Value     = 390.67

    ProxiedDevice.6.Node.2.Type                                  = "Switch"
    ProxiedDevice.6.Node.2.IoTCapabilityNumberOfEntries          = 3
    ProxiedDevice.6.Node.2.IoTCapability.1.Class                 = "BinaryControl"
    ProxiedDevice.6.Node.2.IoTCapability.1.BinaryControl.Type    = "Switch"
    ProxiedDevice.6.Node.2.IoTCapability.1.BinaryControl.State   = true
    ProxiedDevice.6.Node.2.IoTCapability.2.Class                 = "LevelSensor"
    ProxiedDevice.6.Node.2.IoTCapability.2.LevelSensor.Type      = "Power"
    ProxiedDevice.6.Node.2.IoTCapability.2.LevelSensor.Unit      = "W"
    ProxiedDevice.6.Node.2.IoTCapability.2.LevelSensor.Value     = 76
    ProxiedDevice.6.Node.2.IoTCapability.3.Class                 = "LevelSensor"
    ProxiedDevice.6.Node.2.IoTCapability.3 Name                  = "Accumulated Power"
    ProxiedDevice.6.Node.2.IoTCapability.3.LevelSensor.Type      = "Power"
    ProxiedDevice.6.Node.2.IoTCapability.3.LevelSensor.Unit      = "KWh"
    ProxiedDevice.6.Node.2.IoTCapability.3.LevelSensor.Value     = 1783.63

    ProxiedDevice.6.Node.3.Type                                  = "Switch"
    ProxiedDevice.6.Node.3.IoTCapabilityNumberOfEntries          = 3
    ProxiedDevice.6.Node.3.IoTCapability.1.Class                 = "BinaryControl"
    ProxiedDevice.6.Node.3.IoTCapability.1.BinaryControl.Type    = "Switch"
    ProxiedDevice.6.Node.3.IoTCapability.1.BinaryControl.State   = true
    ProxiedDevice.6.Node.3.IoTCapability.2.Class                 = "LevelSensor"
    ProxiedDevice.6.Node.3.IoTCapability.2.LevelSensor.Type      = "Power"
    ProxiedDevice.6.Node.3.IoTCapability.2.LevelSensor.Unit      = "W"
    ProxiedDevice.6.Node.3.IoTCapability.2.LevelSensor.Value     = 0
    ProxiedDevice.6.Node.3.IoTCapability.3.Class                 = "LevelSensor"
    ProxiedDevice.6.Node.3.IoTCapability.3 Name                  = "Accumulated Power"
    ProxiedDevice.6.Node.3.IoTCapability.3.LevelSensor.Type      = "Power"
    ProxiedDevice.6.Node.3.IoTCapability.3.LevelSensor.Unit      = "KWh"
    ProxiedDevice.6.Node.3.IoTCapability.3.LevelSensor.Value     = 53.26</code></pre>

<h3 class="appendix3" id="sec:example-battery-powered-radiator-thermostat">V.5.7 Example: Battery powered radiator thermostat<a class="headerlink" href="14-index-iot-data-model-theory-of-operation.html#sec:example-battery-powered-radiator-thermostat" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>This example shows the IoT model for a radiator thermostat with an integrated USP Agent, which is directly controlled.</p>

<p>Structure elements:</p>

<ul>
<li>IoTCapability.1 (EnumControl): Operation Mode</li>
<li>IoTCapability.2 (EnumControl): Auto/Manual Temperature setting</li>
<li>IoTCapability.3 (EnumControl): Vacation Temperature setting</li>
<li>IoTCapability.4 (LevelSensor) : Current Temperature</li>
<li>IoTCapability.5 (LevelSensor): Valve position</li>
<li>IoTCapability.6 (LevelSensor): Battery status</li>
</ul>

<p><em>Note: All temperature settings are modeled as &ldquo;EnumControl&rdquo; to define a range between 4 and 23° degC in steps of 0.5° or an &ldquo;Off&rdquo; value.</em></p>

<p>Instantiated data model:</p>

<pre><code>    Device.DeviceInfo.Description                  = "Battery powered radiator
                                                      thermostat"

    Device.IoTCapabilityNumberOfEntries            = 6

    Device.IoTCapability.1.Class                   = "EnumControl
    Device.IoTCapability.1.EnumControl.Type        = "ThermostatMode"
    Device.IoTCapability.1.EnumControl.ValidValues = "Off, Auto, Manual, Vacation"
    Device.IoTCapability.1.EnumControl.Value       = "Auto"      # current mode

    Device.IoTCapability.2.Class                   = "EnumControl
    Device.IoTCapability.2.Name                    = "Desired Temperature"
    Device.IoTCapability.2.EnumControl.Type        = "TemperatureMode"
    Device.IoTCapability.2.EnumControl.ValidValues = "Off, 4, 4.5, 5.0, 5.5,
                                                     6, 6.5, 7, 7.5, 8, 8.5,
                                                     9, 9.5, 10, 10.5, 11,
                                                     11.5, 12, 12.5, 13, 13.5,
                                                     14, 14.5, 15.0, 15.5, 16,
                                                     16.5, 17, 17.5, 18, 18.5,
                                                     19, 19.5, 20, 20.5, 21,
                                                     21.5, 22, 22.5, 23"
    Device.IoTCapability.2.EnumControl.Value       = 19   # Requested temperature

    Device.IoTCapability.3.Class                   = "EnumControl"
    Device.IoTCapability.3.Name                    = "Vacation Temperature"
    Device.IoTCapability.3.EnumControl.Type        = "TemperatureMode"
    Device.IoTCapability.3.EnumControl.ValidValues = "Off, 4, 4.5, 5.0, 5.5,
                                                     6, 6.5, 7, 7.5, 8, 8.5,
                                                     9, 9.5, 10, 10.5, 11,
                                                     11.5, 12, 12.5, 13, 13.5,
                                                     14, 14.5, 15.0, 15.5, 16,
                                                     16.5, 17, 17.5, 18, 18.5,
                                                     19, 19.5, 20, 20.5, 21,
                                                     21.5, 22, 22.5, 23"
    Device.IoTCapability.3.EnumControl.Value       = 12   # Requested temperature
                                                            # during absence

    Device.IoTCapability.4.Class                   = "LevelSensor"
    Device.IoTCapability.4.Name                    = "Current Temperature"
    Device.IoTCapability.4.LevelSensor.Type        = "Temperature"
    Device.IoTCapability.4.LevelSensor.Unit        = "degC"
    Device.IoTCapability.4.LevelSensor.Value       = 19.3 # Current temperature

    Device.IoTCapability.5.Class                   = "LevelSensor"
    Device.IoTCapability.5.Name                    = "Valve Position"
    Device.IoTCapability.5.LevelSensor.Type        = "Position"
    Device.IoTCapability.5.LevelSensor.Unit        = "%"
    Device.IoTCapability.5.LevelSensor.MinValue    = 0
    Device.IoTCapability.5.LevelSensor.MaxValue    = 100
    Device.IoTCapability.5.LevelSensor.Value       = 16     # e.g. 16% valve
                                                               # opening

    Device.IoTCapability.6.Class                   = "LevelSensor"
    Device.IoTCapability.6.Name                    = "Local Battery"
    Device.IoTCapability.6.LevelSensor.Type        = "Battery"
    Device.IoTCapability.6.LevelSensor.Unit        = "%"
    Device.IoTCapability.6.LevelSensor.MinValue    = 0
    Device.IoTCapability.6.LevelSensor.MaxValue    = 100
    Device.IoTCapability.6.LevelSensor.Value       = 82      # e.g. 82% battery load</code></pre>
