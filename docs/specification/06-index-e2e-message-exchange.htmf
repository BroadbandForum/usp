<!-- <h1 class="display-none" id="sec:e2e-message-exchange">6 End to End Message Exchange<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:e2e-message-exchange" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h1> -->

<p>USP Messages are exchanged between Controllers and Agents. In some deployment scenarios, the Controller and Agent have a direct connection. In other deployment scenarios, the messages exchanged by the Controller and Agent traverse multiple intermediate MTP Proxies. The latter deployment scenario typically occurs when the Agent or Controller is deployed outside the proximal or Local Area Network. In both types of scenarios, the End-to-End (E2E) message exchange capabilities of USP permit the:</p>

<ul>
<li>Exchange of USP Records within an E2E Session Context that allows for:

<ul>
<li>Integrity protection for non-payload fields</li>
<li>Protected and unprotected payloads</li>
<li>Segmentation and reassembly of E2E Messages that would be too large to transfer through the intermediate MTP Proxies.</li>
</ul></li>
<li>Exchange of USP Records without an E2E Session Context that allows for:

<ul>
<li>Integrity protection for non-payload fields</li>
<li>Unprotected payloads or protected payloads where the payload protection security mechanism doesn’t require a concept of a session (e.g., COSE)</li>
</ul></li>
</ul>

<p>Protected payloads provide a secure message exchange (confidentiality, integrity and identity authentication) through exchange of USP Messages that are secured by the originating and receiving USP Endpoints.</p>

<p>USP makes use of USP Records to exchange USP Messages between Endpoints, see <a href='04-index-mtp.html#sec:record-definition' title='' class="heading">Record Definition</a> for a description of the USP Record fields.</p>

<p><strong><span id="r-e2e.1">R-E2E.1<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.1" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> - A receiving USP Endpoint MUST ignore any Record that does not contain its own Endpoint Identifier as the <code>to_id</code> field of the Record.</p>

<p><strong><span id="r-e2e.2">R-E2E.2<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.2" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – A USP Record with record_type = session_context MUST contain at least one <code>payload</code> field, or a non-zero <code>retransmit_id</code>. (DEPRECATED)</p>

<p><em>Note: the R-E2E.2 requirement was deprecated in USP 1.2, because sending a Session Context Record without a payload is useful for restarting a Session Context</em></p>

<p><em>Note: the requirements below reference Objects and Parameters used to manage the E2E Session. These are specified in the Device:2 Data Model <span class="cite" data-citation-ids="TR-181"><a href='01-index-introduction.html#ref-TR-181' title=''>[38]</a></span>.</em></p>

<p><em>Note: The USP Record Encapsulation section was moved to <a href='04-index-mtp.html#sec:usp-record-encapsulation' title='' class="heading">USP Record Encapsulation</a> in USP 1.2.</em></p>

<h2 id="sec:exchange-of-usp-records-within-an-e2e-session-context">6.1 Exchange of USP Records within an E2E Session Context<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:exchange-of-usp-records-within-an-e2e-session-context" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h2>

<p>When exchanging USP Records within an E2E Session Context, <code>record_type</code> of <code>session_context</code> is used, and all required parameters for <code>record_type</code> of <code>session_context</code> are supplied.</p>

<h3 id="sec:establishing-an-e2e-session-context">6.1.1 Establishing an E2E Session Context<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:establishing-an-e2e-session-context" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>For the exchange of USP Records within an E2E Session Context to happen between two USP Endpoints, an E2E Session Context (Session Context) is established between the participating USP Endpoints. The Session Context is uniquely identified within the USP Endpoint by the combination of the Session Identifier and remote USP Endpoint’s Identifier.</p>

<p>In USP, either a Controller or an Agent can begin the process of establishing a Session Context. This is done by the Controller or Agent sending a USP Record with a <code>session_id</code> field that is not currently associated with the Agent/Controller combination and a <code>sequence_id</code> field value of <code>1</code>. Note that a Record with an empty payload can be used to establish a new Session Context.</p>

<p><strong><span id="r-e2e.3">R-E2E.3<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.3" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – Session Context identifiers MUST be generated by the USP Endpoint that originates the session such that it is greater than 1 and scoped to the remote USP Endpoint.</p>

<p>When a Session Context had been previously established between an Agent and Controller and the remote USP Endpoint receives a USP Record with a different <code>session_id</code> field, the remote USP Endpoint will restart the Session Context using the new <code>session_id</code> field.</p>

<p><strong><span id="r-e2e.4">R-E2E.4<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.4" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When a USP Endpoint receives a USP Record from another USP Endpoint where there is no established Session Context, and the USP Record includes a Session Context identifier, and the USP Endpoint is configured to allow Session Context to be used with the other Endpoint, the USP Endpoint MUST start a new Session Context for the remote USP Endpoint, and initialize the <code>sequence_id</code> field to <code>1</code>.</p>

<p><strong><span id="r-e2e.5">R-E2E.5<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.5" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – At most one (1) Session Context is established between an Agent and Controller.</p>

<p><strong><span id="r-e2e.6">R-E2E.6<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.6" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When a USP Endpoint receives a USP Record from a remote USP Endpoint with a different Session Context identifier than was previously established, the USP Endpoint MUST start a new Session Context for the remote USP Endpoint, and initialize the <code>sequence_id</code> field to <code>1</code>.</p>

<p><em>Note: Implementations need to consider if outstanding USP Messages that have not been transmitted to the remote USP Endpoint need to be transmitted within the newly established Session Context.</em></p>

<p><strong><span id="r-e2e.6a">R-E2E.6a<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.6a" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When an Agent is configured not to allow Session Context or does not support Session Context and receives a USP Record initiating Session Context, the Agent MUST reply with a Disconnect Record and MUST include reason_code and reason fields indicating Session Context is not allowed (code 7106 from <a href='04-index-mtp.html#sec:usp-record-errors' title='' class="heading">USP Record Errors</a>).</p>

<p>When a Controller is configured to require Session Context and receives a Disconnect Record indicating Session Context is not allowed or supported by the Agent, the Controller is expected to terminate the MTP session.</p>

<p><strong><span id="r-e2e.6b">R-E2E.6b<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.6b" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – If an Agent needs to terminate a Session Context without terminating an existing MTP connection where Session Context is being used, it MUST send a Disconnect Record and MUST include reason_code and reason indicating Session Context is being terminated (code 7105 from <a href='04-index-mtp.html#sec:usp-record-errors' title='' class="heading">USP Record Errors</a>).</p>

<h4 id="sec:session-context-expiration">6.1.1.1 Session Context Expiration<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:session-context-expiration" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>Sessions Contexts have a lifetime and can expire. The expiration of the Session Context is handled by the <code>Device.LocalAgent.Controller.{i}.E2ESession.SessionExpiration</code> Parameter in the Agent. If the Agent does not see activity (an exchange of USP Records) within the Session Context, the Agent considers the Session Context expired and for the next interaction with the Controller a new Session Context is established.</p>

<p><strong><span id="r-e2e.7">R-E2E.7<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.7" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When a Session Context between a Controller or Agent expires the Agent MUST initiate a new Session Context upon the next interaction with the remote USP Endpoint or from a Session Context request by the remote USP Endpoint.</p>

<h4 id="sec:exhaustion-of-sequence-identifiers">6.1.1.2 Exhaustion of Sequence Identifiers<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:exhaustion-of-sequence-identifiers" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>USP Endpoints identify the USP Record using the <code>sequence_id</code> field. When the <code>sequence_id</code> field for a USP Record that is received or transmitted by a USP Endpoint nears the maximum value that can be handled by the USP Endpoint, the USP Endpoint will attempt to establish a new Session Context in order to avoid a rollover of the <code>sequence_id</code> field.</p>

<p><strong><span id="r-e2e.8">R-E2E.8<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.8" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When a USP Endpoint receives a USP Record with a value of the <code>sequence_id</code> field that is within 10,000 of the maximum size for the data type of the <code>sequence_id</code> field, the USP Endpoint MUST establish a new Session Context with the remote USP Endpoint.</p>

<p><strong><span id="r-e2e.9">R-E2E.9<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.9" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When a USP Endpoint transmits a USP Record with a value of the <code>sequence_id</code> field that is within 10,000 of the maximum size for the data type of the <code>sequence_id</code> field, the USP Endpoint MUST establish a new Session Context with the remote USP Endpoint upon its next contact with the remote USP Endpoint.</p>

<h4 id="sec:failure-handling-in-the-session-context">6.1.1.3 Failure Handling in the Session Context<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:failure-handling-in-the-session-context" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>In some situations, (e.g., TLS negotiation handshake) the failure to handle a received USP Record is persistent, causing an infinite cycle of &ldquo;receive failure/request-&gt;session/establish-&gt;session/receive-&gt;failure&rdquo; to occur. In these situations, the Agent enforces a policy as defined in this section regarding establishment of failed Session Contexts or failed interactions within a Session Context. The policy is controlled by the <code>Device.LocalAgent.Controller.{i}.E2ESession.Enable</code> Parameter.</p>

<p><strong><span id="r-e2e.10">R-E2E.10<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.10" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When retrying USP Records, the Agent MUST use the following retry algorithm to manage the retransmission Session Context establishment procedure:</p>

<p>The retry interval range is controlled by two Parameters, the minimum wait interval and the interval multiplier, each of which corresponds to a data model Parameter, and which are described in the table below. The factory default values of these Parameters MUST be the default values listed in the Default column. They MAY be changed by a Controller with the appropriate permissions at any time.</p>

<table>
<col width="19%" />
<col width="5%" />
<col width="8%" />
<col width="68%" />
<tr class="header">
<th align="right">Descriptive Name</th>
<th align="center">Symbol</th>
<th align="center">Default</th>
<th align="left">Data Model Parameter Name</th>
</tr>
<tr class="odd">
<td align="right">Minimum wait interval</td>
<td align="center">m</td>
<td align="center">5 seconds</td>
<td align="left"><code>Device.LocalAgent.Controller.{i}.E2ESession.SessionRetryMinimumWaitInterval</code></td>
</tr>
<tr class="even">
<td align="right">Interval multiplier</td>
<td align="center">k</td>
<td align="center">2000</td>
<td align="left"><code>Device.LocalAgent.Controller.{i}.E2ESession.SessionRetryIntervalMultiplier</code></td>
</tr>
</table>

<table>
<col width="17%" />
<col width="42%" />
<col width="41%" />
<tr class="header">
<th align="right">Retry Count</th>
<th align="center">Default Wait Interval Range (min-max seconds)</th>
<th align="left">Actual Wait Interval Range (min-max seconds)</th>
</tr>
<tr class="odd">
<td align="right">#1</td>
<td align="center">5-10</td>
<td align="left">m - m.(k/1000)</td>
</tr>
<tr class="even">
<td align="right">#2</td>
<td align="center">10-20</td>
<td align="left">m.(k/1000) - m.(k/1000)^2</td>
</tr>
<tr class="odd">
<td align="right">#3</td>
<td align="center">20-40</td>
<td align="left">m.(k/1000)^2 - m.(k/1000)^3</td>
</tr>
<tr class="even">
<td align="right">#4</td>
<td align="center">40-80</td>
<td align="left">m.(k/1000)^3 - m.(k/1000)^4</td>
</tr>
<tr class="odd">
<td align="right">#5</td>
<td align="center">80-160</td>
<td align="left">m.(k/1000)^4 - m.(k/1000)^5</td>
</tr>
<tr class="even">
<td align="right">#6</td>
<td align="center">160-320</td>
<td align="left">m.(k/1000)^5 - m.(k/1000)^6</td>
</tr>
<tr class="odd">
<td align="right">#7</td>
<td align="center">320-640</td>
<td align="left">m.(k/1000)^6 - m.(k/1000)^7</td>
</tr>
<tr class="even">
<td align="right">#8</td>
<td align="center">640-1280</td>
<td align="left">m.(k/1000)^7 - m.(k/1000)^8</td>
</tr>
<tr class="odd">
<td align="right">#9</td>
<td align="center">1280-2560</td>
<td align="left">m.(k/1000)^8 - m.(k/1000)^9</td>
</tr>
<tr class="even">
<td align="right">#10 and subsequent</td>
<td align="center">2560-5120</td>
<td align="left">m.(k/1000)^9 - m.(k/1000)^10</td>
</tr>
</table>

<p><strong><span id="r-e2e.11">R-E2E.11<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.11" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> - Beginning with the tenth retry attempt, the Agent MUST choose from the fixed maximum range. The Agent will continue to retry a failed session establishment until a USP Message is successfully received by the Agent or until the SessionExpiration time is reached.</p>

<p><strong><span id="r-e2e.12">R-E2E.12<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.12" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – Once a USP Record is successfully received, the Agent MUST reset the Session Context retry count to zero for the next Session Context establishment.</p>

<p><strong><span id="r-e2e.13">R-E2E.13<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.13" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – If a reboot of the Agent occurs, the Agent MUST reset the Session Context retry count to zero for the next Session Context establishment.</p>

<h3 id="sec:usp-record-exchange">6.1.2 USP Record Exchange<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:usp-record-exchange" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>Once a Session Context is established, USP Records are created to exchange payloads in the Session Context. USP Records are uniquely identified by their originating USP Endpoint Identifier (<code>from_id</code>), Session Context identifier (<code>session_id</code>) and USP Record sequence identifier (<code>sequence_id</code>).</p>

<h4 id="sec:usp-record-transmission">6.1.2.1 USP Record Transmission<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:usp-record-transmission" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>When an originating USP Endpoint transmits a USP Record, it creates the USP Record with a monotonically increasing sequence identifier (<code>sequence_id</code>).</p>

<p><strong><span id="r-e2e.14">R-E2E.14<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.14" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When an originating USP Endpoint transmits a USP Record, it MUST set the sequence identifier of the first transmitted USP Record in the Session Context to 1.</p>

<p><strong><span id="r-e2e.15">R-E2E.15<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.15" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When an originating USP Endpoint transmits additional USP Records, the originating USP Endpoint MUST monotonically increase the sequence identifier from the last transmitted USP Record in the Session Context by one (1).</p>

<p>To communicate the sequence identifier of the last USP Record received by a receiving USP Endpoint to the originating USP Endpoint, whenever a USP Endpoint transmits a USP Record the originating USP Endpoint communicates the next sequence identifier of a USP Record it expects to receive in the <code>expected_id</code> field. The receiving USP Endpoint uses this information to maintain its buffer of outgoing (transmitted) USP Records such that any USP Records with a sequence identifier less than the <code>expected_id</code> can be removed from the receiving USP Endpoints buffer of transmitted USP Records for this Session Context.</p>

<p><strong><span id="r-e2e.16">R-E2E.16<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.16" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When an originating USP Endpoint transmits a USP Record, the originating USP Endpoint MUST preserve it in an outgoing buffer, for fulfilling retransmit requests, until the originating USP Endpoint receives a USP Record from the receiving USP Endpoint with a greater <code>expected_id</code>.</p>

<p><strong><span id="r-e2e.17">R-E2E.17<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.17" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When an originating USP Endpoint transmits a USP Record, the originating USP Endpoint MUST inform the receiving USP Endpoint of the next sequence identifier in the Session Context for a USP Record it expects to receive.</p>

<h4 id="sec:payload-security-within-the-session-context">6.1.2.2 Payload Security within the Session Context<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:payload-security-within-the-session-context" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>The value of the <code>payload_security</code> field defines the type of payload security that is performed in the Session Context. Once a Session Context is established the payload security stays the same throughout the lifetime of the Session Context.</p>

<p><strong><span id="r-e2e.18">R-E2E.18<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.18" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – The originating USP Endpoint MUST use the same value in the <code>payload_security</code> field for all USP Records within a Session Context.</p>

<h4 id="sec:usp-record-reception">6.1.2.3 USP Record Reception<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:usp-record-reception" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>USP Records received by a USP Endpoint have information that is used by the receiving USP Endpoint to process:</p>

<ol>
<li>The payload contained within the USP Record,</li>
<li>A request to retransmit a USP Record, and</li>
<li>The contents of the outgoing buffer to clear the USP Records that the originating USP Endpoint has indicated it has received from the receiving USP Endpoint.</li>
</ol>

<p>As USP Records can be received out of order or not at all, the receiving USP Endpoint only begins to process a USP Record when the <code>sequence_id</code> field of the USP Record in the Session Context is the <code>sequence_id</code> field that the receiving USP Endpoint expects to receive. The following figure depicts the high-level processing for USP Endpoints that receive a USP Record.</p>

<figure>
<img src="e2e-message-exchange/processing-received-records.png" id="fig:processing-received-records" alt=""/>
<figcaption>Figure 9: Processing of Received USP Records<a class="headerlink" href="06-index-e2e-message-exchange.html#fig:processing-received-records" title="Permalink to this figure"> <img src='permalink.png' title='' width="0.8em"/></a></figcaption>
</figure>

<p><strong><span id="r-e2e.19">R-E2E.19<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.19" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – The receiving USP Endpoint MUST ensure that the value in the <code>payload_security</code> field for all USP Records within a Session Context is the same and fail the USP Record if the value of the <code>payload_security</code> field is different.</p>

<p><strong><span id="r-e2e.20">R-E2E.20<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.20" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – Incoming USP Records MUST be processed per the following rules:</p>

<ol>
<li>If the USP Record contains a <code>sequence_id</code> field larger than the next <code>expected_id</code> value, the USP Record is added to an incoming buffer of unprocessed USP Records.</li>
<li>If the <code>sequence_id</code> is less that the next <code>expected_id</code>, the Endpoint MUST gracefully ignore the USP Record.</li>
<li>If the <code>sequence_id</code> matches the <code>expected_id</code>, for the USP Record and any sequential USP Records in the incoming buffer:

<ol>
<li>If the payload is not empty, it is passed to the implementation for processing based on the type of payload in the <code>payload_security</code> field and if the payload requires reassembly according to the values of the <code>payload_sar_state</code> and <code>payloadrec_sar_state</code> fields.</li>
<li>If a <code>retransmit_id</code> field is non-zero, the USP Record with the sequence identifier of the <code>retransmit_id</code> field is resent from the outgoing buffer.</li>
</ol></li>
<li>The <code>expected_id</code> field for new outgoing Records is set to <code>sequence_id</code> field + 1 of this USP Record.</li>
</ol>

<h5 id="sec:failure-handling-of-received-usp-records-within-a-session-context">6.1.2.3.1 Failure Handling of Received USP Records Within a Session Context<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:failure-handling-of-received-usp-records-within-a-session-context" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h5>

<p>When a receiving USP Endpoint fails to either buffer or successfully process a USP Record, the receiving USP Endpoint initiates a new Session Context.</p>

<p><strong><span id="r-e2e.21">R-E2E.21<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.21" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When a USP Endpoint that receives a USP Record within a Session Context that fails to buffer or successfully process (e.g., decode, decrypt, retransmit) the USP Endpoint MUST start a new Session Context.</p>

<h4 id="sec:usp-record-retransmission">6.1.2.4 USP Record Retransmission<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:usp-record-retransmission" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>An Agent or Controller can request to receive USP Records that it deems as missing at any time within the Session Context. The originating USP Endpoint requests a USP Record from the receiving USP Endpoint by placing the sequence identifier of the requested USP Record in the <code>retransmit_id</code> field of the USP Record to be transmitted.</p>

<p>The receiving USP Endpoint will determine if USP Record exists and then re-send the USP Record to the originating USP Endpoint.</p>

<p>If the USP Record doesn’t exist, the USP Endpoint that received the USP Record will consider the USP Record as failed and perform the failure processing as defined in section Failure Handling of Received USP Records.</p>

<p>To guard against excessive requests to retransmit a specific USP Record, the USP Endpoint checks to see if the number of times the USP Record has been retransmitted is greater than or equal to maximum times a USP Record can be retransmitted as defined in the <code>Device.LocalAgent.Controller.{i}.E2ESession.MaxRetransmitTries</code> Parameter. If this condition is met, then the USP Endpoint that received the USP Record with the retransmit request will consider the USP Record as failed and perform the failure processing as defined in section Failure Handling of Received USP Records.</p>

<h3 id="sec:guidelines-for-handling-session-context-restarts">6.1.3 Guidelines for Handling Session Context Restarts<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:guidelines-for-handling-session-context-restarts" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>A Session Context can be restarted for a number of reasons (e.g., sequence id exhaustion, errors, manual request). When a Session Context is restarted, the USP Endpoints could have USP Records that have not been transmitted, received or processed. This section provides guidance for USP Endpoints when the Session Context is restarted.</p>

<p>The originating Endpoint is responsible for determining the policy for recovering from USP Records that were not transmitted. For example, the policy could be to resend the USP Message conveyed through the USP Record, or to simply discard the USP Message.</p>

<p><strong><span id="r-e2e.22">R-E2E.22<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.22" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – The receiving USP Endpoint MUST successfully process the USP Record through the <code>expected_id</code> field that it last transmitted in the previous session.</p>

<p>When a USP Endpoint receives a USP Record that cannot pass an integrity check or that has an incorrect value in the <code>session_id</code> element, the Session Context is restarted.</p>

<p><strong><span id="r-e2e.23">R-E2E.23<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.23" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – USP Records that do not pass integrity checks MUST be silently ignored and the receiving USP Endpoint MUST restart the Session Context.</p>

<p>This allows keys to be distributed and enabled under the old session keys and then request a session restarted under the new keys.</p>

<p><strong><span id="r-e2e.24">R-E2E.24<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.24" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – USP Records that pass the integrity check but have an invalid value in the <code>session_id</code> field MUST be silently ignored and the receiving USP Endpoint MUST restart the Session Context.</p>

<h3 id="sec:segmented-message-exchange">6.1.4 Segmented Message Exchange<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:segmented-message-exchange" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>Since USP can use different types of MTPs, some MTPs place a constraint on the size of the USP Message that it can transport. To handle this, USP has a Segmentation and Reassembly function. When this Segmentation and Reassembly function is performed by Controller and Agent, it removes the possibly that the message may be blocked (and typically) dropped by the intermediate transport servers. A Segmentation and Reassembly example is shown in the figure below where the ACS Controller segments the USP Message within the USP Record into segments of 64K bytes because the STOMP MTP Endpoint (in this example) can only handle messages up to 64K bytes.</p>

<p>While the <code>sequence_id</code> field identifies the USP Record sequence identifier within the context of a Session Context and the <code>retransmit_id</code> field provides a means of a receiving USP Endpoint to indicate to the transmitting USP Endpoint that it needs a specific USP Record to ensure information fields are processed in a first-in-first-out (FIFO) manner, the Segmentation and Reassembly function allows multiple payloads to be segmented by the transmitting USP Endpoint and reassembled by the receiving USP Endpoint by augmenting the USP Record with additional information fields without changing the current semantics of the USP Record’s field definitions. This is done using the <code>payload_sar_state</code> and <code>payloadrec_sar_state</code> fields in the USP Record to indicate status of the segmentation and reassembly procedure. This status along with the existing <code>sequence_id</code>, <code>expected_id</code> and <code>retransmit_id</code> fields and the foreknowledge of the E2E maximum transmission unit <code>MaxUSPRecordSize</code> Parameter in the Agent’s Controller table provide the information needed for two USP Endpoints to perform segmentation and reassembly of payloads conveyed by USP Records. In doing so, the constraint imposed by MTP Endpoints (that could be intermediate MTP Endpoints) that do not have segmentation and reassembly capabilities are alleviated. USP Records of any size can now be conveyed across any USP MTP Endpoint as depicted below:</p>

<figure>
<img src="e2e-message-exchange/segmentation-and-reassembly.png" id="fig:segmentation-and-reassembly" alt=""/>
<figcaption>Figure 10: E2E Segmentation and Reassembly<a class="headerlink" href="06-index-e2e-message-exchange.html#fig:segmentation-and-reassembly" title="Permalink to this figure"> <img src='permalink.png' title='' width="0.8em"/></a></figcaption>
</figure>

<p><em>Note: the 64k size limit is not inherent to the STOMP protocol. It is merely
provided here as an example.</em></p>

<h4 id="sec:sar-function-algorithm">6.1.4.1 SAR function algorithm<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:sar-function-algorithm" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>The following algorithm is used to provide the SAR function.</p>

<h5 id="sec:originating-usp-endpoint">6.1.4.1.1 Originating USP Endpoint<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:originating-usp-endpoint" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h5>

<p>For each USP Message segment the Payload:</p>

<ol>
<li>Compose the USP Message.</li>
<li>If <code>payload_security</code> is <code>TLS12</code>, encrypt the USP Message. TLS will segment the encrypted Message per the maximum allowed TLS record size.

<ol>
<li>If all TLS records + Record header elements are less than the maximum allowed USP Record size, then a single USP Record is sent.</li>
<li>Otherwise segmentation of the USP Record will need to be done.

<ol>
<li>If the record size of a single TLS record + USP Record header elements is less than the maximum allowed USP Record size, exactly one TLS record can be included in a USP Record.</li>
<li>If the TLS record size + Record header elements is greater than the maximum allowed USP Record size, the TLS record is segmented across multiple USP Records.</li>
</ol></li>
</ol></li>
<li>If the Message is transmitted using <code>PLAINTEXT</code> and the Message + Record header elements are greater than the maximum allowed USP Record size, the USP Record is segmented.</li>
<li>Set the <code>payload_sar_state</code> field for each transmitted Record.

<ol>
<li>If there is only one Record, <code>payload_sar_state</code> = <code>NONE (0)</code>.</li>
<li>If there is more than one USP Record, the <code>payload_sar_state</code> field is set to <code>BEGIN (1)</code> on the first Record, <code>COMPLETE (3)</code> on the last Record, and <code>INPROCESS (2)</code> on all Records between the two.</li>
</ol></li>
<li>Set the <code>payloadrec_sar_state</code> field for each transmitted Record.

<ol>
<li>If there is only one Record or one Secure Message Exchange TLS record per USP Record, <code>payloadrec_sar_state</code> = <code>NONE (0)</code>.</li>
<li>If Secure Message Exchange TLS records or a <code>PLAINTEXT</code> payload are segmented across multiple USP Records, <code>payloadrec_sar_state</code> = <code>BEGIN (1)</code> on a Record that contains the initial segment of a TLS record or <code>PLAINTEXT</code> payload, <code>COMPLETE (3)</code> on a Record that contains the final segment of a TLS record or <code>PLAINTEXT</code> payload, and <code>INPROCESS (2)</code> on all Records containing segments between initial and final segments of a TLS record or <code>PLAINTEXT</code> payload.</li>
</ol></li>
<li>Each Record is sent (within a Session Context) using the procedures defined in the USP Record Message Exchange section above.</li>
</ol>

<p>The effect of the above rules for <code>PLAINTEXT</code> payloads or for Secure Message Exchange with a single TLS record is that <code>payloadrec_sar_state</code> will be the same as <code>payload_sar_state</code> for all Records used to communicate the USP Message.</p>

<p><em>Note: The maximum allowed USP Record size can be exposed via the data model using the <code>MaxUSPRecordSize</code> Parameter.</em></p>

<h5 id="sec:receiving-endpoint">6.1.4.1.2 Receiving Endpoint<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:receiving-endpoint" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h5>

<p>For each USP Message reassemble the segmented payload:</p>

<ol>
<li>When a USP Record that indicates segmentation has started, store the USP Records until a USP Record is indicated to be complete. A completed segmentation is where the USP Record’s <code>payload_sar_state</code> and <code>payloadrec_sar_state</code> have a value of <code>COMPLETE (3)</code>.</li>
<li>Follow the procedures in USP Record Retransmission to retransmit any USP Records that were not received.</li>
<li>Once the USP Record is received that indicates that the segmentation is complete, reassemble the payload by appending the payloads using the monotonically increasing <code>sequence_id</code> field’s value from the smaller number to larger sequence numbers. The reassembly keeps the integrity of the instances of the payload field’s payload records. To keep the integrity of the payload record, the payload record is reassembled using the <code>payloadrec_sar_state</code> values.</li>
<li>Reassembly of the payload that represents the USP Message is complete.</li>
</ol>

<p>If the segmentation and reassembly fails for any reason, the USP Endpoint that received the segmented USP Records will consider the last received USP Record as failed and perform the failure processing as defined in section Failure Handling of Received USP Records.</p>

<h4 id="sec:segmentation-examples">6.1.4.2 Segmentation Examples<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:segmentation-examples" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>The following examples show the values assigned to <code>payload_sar_state</code> and <code>payloadrec_sar_state</code> fields for various permutations of <code>payload_security</code>, and maximum USP Record size and Secure Message Exchange maximum TLS record size relative to the size of the USP Message. The examples are not exhaustive.</p>

<p><strong>Case 1: payload_security = PLAINTEXT, single USP Record</strong></p>

<p>Conditions:</p>

<ol>
<li>Maximum USP Record size &gt; size of (USP Message + USP Record header)</li>
</ol>

<img src="e2e-message-exchange/segmentation-case-1.png" alt=""/>

<p><strong>Case 2: payload_security = PLAINTEXT, fragmented across multiple USP Records</strong></p>

<p>Conditions:</p>

<ol>
<li>Maximum USP Record size &lt; size of (USP Message + USP Record header)</li>
</ol>

<img src="e2e-message-exchange/segmentation-case-2.png" alt=""/>

<p><strong>Case 3: payload_security = TLS12, single TLS record, single USP Record</strong></p>

<p>Conditions:</p>

<ol>
<li>Maximum TLS record size &gt; size of (USP Message + TLS record header)</li>
<li>Maximum USP Record size &gt; size of USP Message + size of TLS record header + size of USP Record header</li>
</ol>

<img src="e2e-message-exchange/segmentation-case-3.png" alt=""/>

<p><strong>Case 4: Payload_security = TLS12, all TLS records in a single USP Record</strong></p>

<p>Conditions:</p>

<ol>
<li>Maximum TLS record size &lt; size of (USP Message + TLS record header)</li>
<li>Maximum USP Record size &gt; size of all TLS records + size of USP Record header</li>
</ol>

<img src="e2e-message-exchange/segmentation-case-4.png" alt=""/>

<p><strong>Case 5: Payload_security = TLS12, single TLS record fragmented across multiple USP Records</strong></p>

<p>Conditions:</p>

<ol>
<li>Maximum TLS record size &gt; size of (USP Message + TLS record header)</li>
<li>Maximum USP Record size &lt; size of (TLS record + USP Record header)</li>
</ol>

<img src="e2e-message-exchange/segmentation-case-5.png" alt=""/>

<p><strong>Case 6: Payload_security = TLS12, multiple TLS records, one TLS record per USP Record</strong></p>

<p>Conditions:</p>

<ol>
<li>Maximum TLS record size &lt; size of (USP Message + TLS record header)</li>
<li>Maximum USP Record size &gt; maximum TLS record size + size of USP Record header</li>
<li>Maximum USP Record size &lt; size of USP Message + size of TLS record header + size of USP Record header</li>
</ol>

<img src="e2e-message-exchange/segmentation-case-6.png" alt=""/>

<p><strong>Case 7: Payload_security = TLS12, multiple TLS records, some TLS records fragmented across multiple USP Records</strong></p>

<p>Conditions:</p>

<ol>
<li>Maximum TLS record size &lt; size of (USP Message + TLS record header)</li>
<li>Maximum USP Record size &lt; size of (some TLS records + USP Record header)</li>
</ol>

<img src="e2e-message-exchange/segmentation-case-7.png" alt=""/>

<h3 id="sec:handling-duplicate-usp-records">6.1.5 Handling Duplicate USP Records<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:handling-duplicate-usp-records" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>Circumstances may arise (such as multiple Message Transfer Protocols, retransmission requests) that cause duplicate USP Records (those with an identical <code>sequence_id</code> and <code>session_id</code> fields from the same USP Endpoint) to arrive at the target USP Endpoint.</p>

<p><strong><span id="r-e2e.25">R-E2E.25<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.25" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> - When exchanging USP Records with an E2E Session Context, if a target USP Endpoint receives a USP Record with duplicate <code>sequence_id</code> and <code>session_id</code> fields from the same originating USP Endpoint, it MUST gracefully ignore the duplicate USP Record.</p>

<h2 id="sec:exchange-of-usp-records-without-an-e2e-session-context">6.2 Exchange of USP Records without an E2E Session Context<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:exchange-of-usp-records-without-an-e2e-session-context" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h2>

<p>When the exchange of USP Records without an E2E Session Context is used, the <code>record_type</code> is set to <code>no_session_context</code>.</p>

<p><strong><span id="r-e2e.26">R-E2E.26<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.26" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> - A <code>record_type</code> of <code>no_session_context</code> MUST be used for exchange of USP Records without an E2E Session Context. A non-zero <code>payload</code> MUST be included.</p>

<h3 id="sec:failure-handling-of-received-usp-records-without-a-session-context">6.2.1 Failure Handling of Received USP Records Without a Session Context<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:failure-handling-of-received-usp-records-without-a-session-context" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>When a receiving USP Endpoint fails to either buffer or successfully process a USP Record, the receiving USP Endpoint reports a failure.</p>

<p><strong><span id="r-e2e.27">R-E2E.27<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.27" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When a USP Endpoint that receives a USP Record without a Session Context that fails to buffer or successfully process (e.g., decode, decrypt, retransmit) the USP Endpoint SHOULD send a <code>DisconnectRecord</code> (as described in <a href='04-index-mtp.html#r-mtp.7' title='' class="requirement">R-MTP.7</a> for Agents).</p>

<p>Note that <a href='04-index-mtp.html#r-mtp.7' title='' class="requirement">R-MTP.7</a> says Agents should send a <code>DisconnectRecord</code> when terminating an MTP. Controllers can also send a <code>DisconnectRecord</code> in this case. The MTP can stay connected. Brokered MTP sessions are expected to remain but other MTP connections could be closed.</p>

<h2 id="sec:validating-the-integrity-of-the-usp-record">6.3 Validating the Integrity of the USP Record<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:validating-the-integrity-of-the-usp-record" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h2>

<p>When a USP Record is transmitted to a USP Endpoint, the transmitting USP Endpoint has the capability to protect the integrity of the non-payload fields of the USP Record. The <code>payload</code> field is not part of the generation or verification process, as the expectation is that this element will be secured using an E2E security protection mechanism (<code>payload_security</code> other than PLAINTEXT).</p>

<p>The integrity of the USP Record is required to be validated when the USP Record cannot be protected by the underlying MTP.</p>

<p><strong><span id="r-e2e.28">R-E2E.28<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.28" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> - When a USP Record is received or transmitted the following conditions MUST apply for the USP Record to be considered protected by the underlying MTP:</p>

<ul>
<li>The MTP is encrypted per requirements in the applicable MTP section</li>
<li>The peer MTP certificate contains an Endpoint ID and this Endpoint ID is the same as the USP Record <code>from_id</code> field OR the peer MTP certificate is directly associated (e.g., referenced from a <code>Device.LocalAgent.Controller.{i}.Credential</code> Parameter) with a Controller whose Endpoint ID matches the USP Record <code>from_id</code> field.</li>
<li>The peer MTP certificate is that of a Trusted Broker.</li>
</ul>

<p><strong><span id="r-e2e.29">R-E2E.29<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.29" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – Unless protected by the underlying MTP, when a USP Endpoint transmits a USP Record, the USP Endpoint MUST protect the integrity of the non-payload portion of the USP Record.</p>

<p><strong><span id="r-e2e.30">R-E2E.30<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.30" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When a USP Endpoint receives a USP Record, the USP Endpoint MUST verify the integrity of the non-payload portion of the USP Record when the USP Record contains the mac_signature field or the USP Endpoint is not protected by the underlying MTP.</p>

<p>The integrity of the non-payload fields is accomplished by the transmitting USP Endpoint generating a Message Authentication Code (MAC) or signature of the non-payload fields which is then placed into the mac_signature field where the receiving USP Endpoint then verifies the MAC or signature as appropriate. The method to generate and validate MAC or signature depends on the value of the <code>payload_security</code> field. If the value of the <code>payload_security</code> field is <code>PLAINTEXT</code> then the integrity validation method always uses the signature method described in section Using the Signature Method to Validate the Integrity of USP Records. If the value of the <code>payload_security</code> field is <code>TLS12</code> then the validation method that is used is dependent on whether the TLS handshake has been completed. If the TLS handshake has not been completed, the signature method described in section Using the Signature Method to Validate the Integrity of USP Records is used otherwise the MAC method described in section Using TLS to Validate the Integrity of USP Records is used.</p>

<h3 id="sec:using-the-signature-method-to-validate-the-integrity-of-usp-records">6.3.1 Using the Signature Method to Validate the Integrity of USP Records<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:using-the-signature-method-to-validate-the-integrity-of-usp-records" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>When the transmitting USP Endpoint protects the integrity of the non-payload fields of the USP Record using the signature method in this section, the non-payload fields are protected by signing a hash of the non-payload fields using the private key of the sending USP Endpoint’s certificate. The receiving USP Endpoint then verifies the integrity using either the public key of the certificate in the USP Record <code>sender_cert</code> field or of the certificate used for Secure Message Exchange.</p>

<p>This signature method uses the SHA-256 hash algorithm, as defined in FIPS PUB 180-4 Secure Hash Standard (SHS) <span class="cite" data-citation-ids="FIPS-180.4"><a href='01-index-introduction.html#ref-FIPS-180.4' title=''>[2]</a></span>, and the NIST P-256 curve that generates a signature for the hash using the Digital Signature Standard (DSS) scheme as defined in FIPS PUB 186-4 Digital Signature Standard (DSS) <span class="cite" data-citation-ids="FIPS-186.4"><a href='01-index-introduction.html#ref-FIPS-186.4' title=''>[3]</a></span>. To reduce the burden of requiring a strong source of randomness, the signature algorithm may apply the method described in RFC 6979 <span class="cite" data-citation-ids="RFC6979"><a href='01-index-introduction.html#ref-RFC6979' title=''>[27]</a></span> to deterministically derive encryption parameters. The signature must be ASN.1 DER-encoded as described in RFC 3279 <span class="cite" data-citation-ids="RFC3279"><a href='01-index-introduction.html#ref-RFC3279' title=''>[11]</a></span>, we will refer to this signature scheme as <code>ECDSA_P256_SHA256_ASN1</code> in this specification.</p>

<p><strong><span id="r-e2e.31">R-E2E.31<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.31" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When using the signature method to protect the integrity of the non-payload portion of the USP Record, the transmitting USP Endpoint MUST protect the integrity using the <code>ECDSA_P256_SHA256_ASN1</code> signature scheme, as defined in this specification, to sign and verify the protection. The transmitting USP Endpoint MUST create the signature using the private key of the transmitting USP Endpoint’s certificate. The receiving USP Endpoint MUST verify the signature using the public key of the transmitted sender’s certificate.</p>

<h3 id="sec:using-tls-to-validate-the-integrity-of-usp-records">6.3.2 Using TLS to Validate the Integrity of USP Records<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:using-tls-to-validate-the-integrity-of-usp-records" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>When the transmitting and receiving USP Endpoints have established a TLS session, the transmitting USP Endpoint no longer needs to generate a signature or transmit the sender’s certificate with the USP Record. Instead the transmitting USP Endpoint generates a MAC that is verified by the receiving USP Endpoint. The MAC ensures the integrity of the non-payload fields of the USP Record. The MAC mechanism used in USP for this purpose is the SHA-256 keyed-Hash Message Authentication Code (HMAC) algorithm. The keys used for the HMAC algorithm are derived in accordance with RFC 5705 <span class="cite" data-citation-ids="RFC5705"><a href='01-index-introduction.html#ref-RFC5705' title=''>[19]</a></span> when using TLS 1.2 or in accordance with the updated version found in RFC 8446 <span class="cite" data-citation-ids="RFC8446"><a href='01-index-introduction.html#ref-RFC8446' title=''>[32]</a></span> when using TLS 1.3. These procedures require the following inputs: a label, a context and the length of the output keying material. The label used must be &ldquo;<code>EXPORTER-BBF-USP-Record</code>&rdquo;, the context must be empty (note that, for TLS 1.2, an empty context, i.e. zero length, is different than no context at all) and the output length must be 64 octets, where the first 32 octets will be used as the client key and the other 32 octets as the server key (in TLS terms). When using TLS 1.2, the PRF used must be the one defined in RFC 5246 <span class="cite" data-citation-ids="RFC5246"><a href='01-index-introduction.html#ref-RFC5246' title=''>[17]</a></span> with SHA-256 Hash.</p>

<p><strong><span id="r-e2e.32">R-E2E.32<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.32" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When generating or validating the MAC or signature to protect the integrity of the USP Record, the sequence of the non-payload fields MUST use the field identifier of the USP Record’s protobuf specification proceeding from lowest to highest. The non-payload fields in the Record definition (other than the <code>mac_signature</code> field itself) MUST be used first and then the fields of the <code>SessionContextRecord</code> if applicable.</p>

<p><strong><span id="r-e2e.32-1">R-E2E.32<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.32-1" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span>.1</strong> – When generating or validating the MAC or signature, all non-payload fields MUST be appended as byte arrays and fed into the MAC or signature generation function with the following conditions:</p>

<ul>
<li>uint64 types MUST be passed as 8 bytes in big endian ordering</li>
<li>uint32 types MUST be passed as 4 bytes in big endian ordering</li>
<li>enum types MUST be treated as uint32</li>
<li>string types MUST be passed as UTF-8 encoded byte array</li>
<li>bytes types MUST be passed as is</li>
</ul>

<p><strong><span id="r-e2e.33">R-E2E.33<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.33" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – If using the TLS MAC method to protect the integrity of a USP Record, and a USP Endpoint receives a USP Record, the USP Endpoint MUST verify the MAC using the SHA-256 HMAC algorithm for the non-payload portion of the USP Record.</p>

<p><strong><span id="r-e2e.34">R-E2E.34<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.34" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – If using the TLS MAC method to protect the integrity of a USP Record, when generating or validating the MAC of the USP Record, the sequence of the non-payload fields MUST use the field identifier of the USP Record’s protobuf specification proceeding from lowest to highest.</p>

<p><strong><span id="r-e2e.35">R-E2E.35<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.35" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – If using the TLS MAC method to protect the integrity of a USP Record, when generating or validating the MAC of the USP Record, the USP Endpoint MUST derive the keys in accordance with RFC 5705 <span class="cite" data-citation-ids="RFC5705"><a href='01-index-introduction.html#ref-RFC5705' title=''>[19]</a></span> when using TLS 1.2 or with accordance with RFC 8446 <span class="cite" data-citation-ids="RFC8446"><a href='01-index-introduction.html#ref-RFC8446' title=''>[32]</a></span> when using TLS 1.3.</p>

<p><strong><span id="r-e2e.36">R-E2E.36<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.36" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – If using the TLS MAC method to protect the integrity of a USP Record, when generating or validating the MAC of the USP Record, the USP Endpoint MUST use a label value of &ldquo;<code>EXPORTER-BBF-USP-Record</code>&rdquo; and a zero length context.</p>

<p><strong><span id="r-e2e.37">R-E2E.37<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.37" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – If using the TLS MAC method to protect the integrity of a USP Record, when generating or validating the MAC of the USP Record, the USP Endpoint MUST generate 64 octets of keying material.</p>

<p><strong><span id="r-e2e.38">R-E2E.38<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.38" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – If using the TLS MAC method to protect the integrity of a USP Record, when generating or validating the MAC of the USP Record, the USP Endpoint MUST use the TLS PRF defined in RFC 5246 <span class="cite" data-citation-ids="RFC5246"><a href='01-index-introduction.html#ref-RFC5246' title=''>[17]</a></span> with SHA-256 Hash when using TLS 1.2 for End-to-End security.</p>

<p><strong><span id="r-e2e.39">R-E2E.39<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.39" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – If using the TLS MAC method to protect the integrity of a USP Record, when generating the MAC of the USP Record, the USP Endpoint MUST use the first 32 octets of the keying material as the client key and the other 32 octets as the server key.</p>

<h2 id="sec:secure-message-exchange">6.4 Secure Message Exchange<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:secure-message-exchange" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h2>

<p>While message transport bindings implement point-to-point security, the existence of broker-based message transports and transport proxies creates a need for end-to-end security within the USP protocol. End-to-end security is established by securing the payloads prior to segmentation and transmission by the originating USP Endpoint and the decryption of reassembled payloads by the receiving USP Endpoint. The indication whether and how the USP Message has been secured is via the <code>payload_security</code> field. This field defines the security protocol or mechanism applied to the USP payload, if any. This section describes the payload security protocols supported by USP.</p>

<h3 id="sec:tls-payload-encapsulation">6.4.1 TLS Payload Encapsulation<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:tls-payload-encapsulation" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h3>

<p>USP employs TLS as one security mechanism for protection of USP payloads in Agent-Controller message exchanges.</p>

<p>While traditionally deployed over reliable streams, TLS is a record-based protocol that can be carried over datagrams, with considerations taken for reliable and in-order delivery. To aid interoperability, USP Endpoints are initially limited to a single cipher specification, though future revisions of the protocol may choose to expand cipher support.</p>

<p><strong><span id="r-e2e.40">R-E2E.40<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.40" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – When using TLS to protect USP payloads in USP Records, USP Endpoints MUST implement TLS 1.2 or later (with backward compatibility to TLS 1.2) with the <code>ECDHE-ECDSA-AES128-GCM-SHA256</code> cipher for TLS 1.2 and the <code>TLS-AES128-GCM-SHA256</code> cipher for TLS 1.3.</p>

<p><strong><span id="r-e2e.40a">R-E2E.40a<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.40a" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> - When using TLS to protect USP payloads in USP Records, USP Endpoints MUST use ECDHE for key exchange and MUST support the named group <code>secp256r1</code> (NIST P-256 curve) for use in ECDHE.</p>

<p><strong><span id="r-e2e.40b">R-E2E.40b<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.40b" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> - When using TLS to protect USP payloads in USP Records, USP Endpoints MUST use the ECDSA signature scheme with the NIST P-256 curve and SHA-256.</p>

<p><em>Note: The requirements listed above require a USP Endpoint to use X.509 certificates with an Elliptic-curve public key compatible with the NIST P-256 curve.</em></p>

<h4 id="sec:session-handshake">6.4.1.1 Session Handshake<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:session-handshake" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>When TLS is used as a payload protection mechanism for USP Message, TLS requires the use of the Session Context to negotiate its TLS session. The USP Endpoint that initiated the Session Context will act in the TLS client role when establishing the security layer. The security layer is constructed using a standard TLS handshake, encapsulated within one or more of the above-defined USP Record payload datagrams. Per the TLS protocol, establishment of a new TLS session requires two round-trips.</p>

<figure>
<img src="e2e-message-exchange/tls-session-handshake.png" id="fig:handshake" alt=""/>
<figcaption>Figure 11: TLS Session Handshake<a class="headerlink" href="06-index-e2e-message-exchange.html#fig:handshake" title="Permalink to this figure"> <img src='permalink.png' title='' width="0.8em"/></a></figcaption>
</figure>

<p><strong><span id="r-e2e.41">R-E2E.41<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.41" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – USP Endpoints that specify <code>TLS12</code> in the <code>payload_security</code> field MUST exchange USP Records within an E2E Session Context.</p>

<p>If the TLS session cannot be established for any reason, the USP Endpoint that received the USP Record will consider the USP Record as failed and perform the failure processing as defined in section Failure Handling of Received USP Records.</p>

<p>TLS provides a mechanism to renegotiate the keys of a TLS session without tearing down the existing session called TLS renegotiation. However, for E2E Message exchange in USP, TLS renegotiation is forbidden.</p>

<p><strong><span id="r-e2e.42">R-E2E.42<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.42" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – USP Endpoints MUST NOT accept requests for TLS renegotiation when used for E2E Message exchange. USP Endpoints MAY send a TLS <code>no_renegotiation</code> alert in response to a request for renegotiation.</p>

<h4 id="sec:authentication">6.4.1.2 Authentication<a class="headerlink" href="06-index-e2e-message-exchange.html#sec:authentication" title="Permalink to this header"> <img src='permalink.png' title='' width="0.8em"/></a></h4>

<p>USP relies upon peer authentication using X.509 certificates, as provided by TLS. Each USP Endpoint identifier is identified within an X.509 certificate. The rules for authentication are provided in <a href='08-index-auth.html#sec:auth' title='' class="heading">Authentication and Authorization</a>.</p>

<p><strong><span id="r-e2e.43">R-E2E.43<a class="headerlink" href="06-index-e2e-message-exchange.html#r-e2e.43" title="Permalink to this span"> <img src='permalink.png' title='' width="0.8em"/></a></span></strong> – USP Endpoints MUST be mutually authenticated using X.509 certificates.</p>

<p>Agents will authenticate Controllers according to rules for analysis of Controller certificates requirements in <a href='08-index-auth.html#sec:analysis-controller-certificates' title='' class="heading">Analysis of Controller Certificates</a>. Controllers will authenticate Agents using the USP Endpoint identifier encoded in the Agent’s certificate as per <a href='08-index-auth.html#sec:agent-authentication' title='' class="heading">Agent Authentication</a></p>

