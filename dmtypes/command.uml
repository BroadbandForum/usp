@startuml

' UML for Command and Request objects

' aggregation: whole   o--  part (part poss shared; poss diff lifetimes)
' composition: whole   *--  part (part owned; same lifetimes)
' extension:   derived --|> base (or right to left)

' number of hyphens controls arrow length
' dots rather than hyphens create dotted arrows
' can also add < or > to agg/comp arrows to indicate navigability

' including the role in the cardinality is a local convention; PlantUML doesn't
' support association roles (and luckily doesn't parse cardinality)

' XXX in theory this is a better way to handle xor but it looks bad in the
'     diagram ; see http://www.uml-diagrams.org/constraint.html
' note "{xor}" as xor
' A .. xor
' xor .. B

' XXX could define more methods, e.g. static create() methods

abstract class Command {
  commandKey: String
  async: Boolean
  request(): Request {abstract}
}

note bottom
  Invoke request() on concrete instance
  to create Request
end note

enum RequestState {
  Requested
  Active
  Canceling
  Canceled
  Success
  Error
}

' XXX need to check re defining unique keys etc; PlantUML permits "{key}"
' XXX need to check re mentioning state and also having an association; if
'     don't mention it then if hiding enums then won't see it at all
abstract class Request {
  commandKey: String {key}
  state: RequestState
  message: String
  cancel(): Boolean
}

note bottom
  Invoke cancel() to cancel Request
end note

Request "1" *--> "1\nstate" RequestState

' XXX maybe not helpful to show these methods?
class Requests {
  'list(): Request[] {static}
  'find(commandKey: String): Request 
}

Requests "1" *--> "*" Request

namespace Download {

  class Command {
    request(): Request
  }
  Command --|> .Command

  class Input {
    fileType: String {mandatory}
    URL: String {mandatory}
    username: String
    password: String
    fileSize: Uint
    targetFileName: String
    delaySeconds: Uint
  }

  Command "1" *--> "1" Input

  Request --|> .Request
  Request "1" *--> "1" Command

  class Output {
    startTime: DateTime
    completeTime: DateTime
  }

  class Error {
    detail: String
  }

  Request "0..1" *--> "1" Output : {xor}
  Request "0..1" *--> "1" Error
}

namespace OtherCommand {
  note "Similar to Download" as N1
}

' XXX this is documented but doesn't work; need newer version?
'hide enum
'hide RequestState

hide empty fields
hide empty methods

@enduml
