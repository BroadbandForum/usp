syntax = "proto3";

package usp;

message Msg {
  Header header = 1;         // Make required in the protocol
  Body body = 2;
}


message Header {
  string msg_id = 1;         // Make required in the protocol
  string msg_type = 2;       // Make required in the protocol
  string proto_version = 3;  // Make required in the protocol
  string to_id = 4;          // Make required in the protocol
  string from_id = 5;        // Make required in the protocol
  string reply_to_id = 6;
}


message Body {
  oneof msg_body {
    Request request = 1;
    Response response = 2;
    Error error = 3;
  }
}


message Request {
  oneof request {
    Get get = 1;
    GetInstances get_instances = 2;
    GetImplDataModel get_impl_data_model = 3;
    Set set = 4;
    Add add = 5;
    Delete delete = 6;
    Operate operate = 7;
    Notify notify = 8;
  }
}


message Response {
  oneof response {
    GetResp get_resp = 1;
    GetInstancesResp get_instances_resp = 2;
    GetImplDataModelResp get_impl_data_model_resp = 3;
    SetResp set_resp = 4;
    AddResp add_resp = 5;
    DeleteResp delete_resp = 6;
    OperateResp operate_resp = 7;
    NotifyResp notify_resp = 8;
  }
}


message Error {
  string err_code = 1;
  string err_msg = 2;
  repeated ParamError param_err = 3;
  
  message ParamError {
    string param_path = 1;
    string err_code = 2;
    string err_msg = 3;
  }
}


message Get {
  repeated string param_path = 1;
}

message GetResp {
  repeated RequestedPathResult req_path_result = 1;

  message RequestedPathResult {
    string requested_path = 1;
    bool invalid_path = 2;
    map<string, string> result_param_map = 3;
  } 
}


message GetInstances {
  repeated string obj_path = 1;
}

message GetInstancesResp {
  repeated RequestedPathResult req_path_result = 1;

  message RequestedPathResult {
    string requested_path = 1;
    bool invalid_path = 2;
    repeated string result_path_list = 3;
  } 
}


message GetImplDataModel {
  repeated ImplObject impl_obj = 1;
  
  message ImplObject { 
    string obj_path = 1;
    bool next_level = 2;
  }
}

message GetImplDataModelResp {
  repeated RequestedPathResult req_path_result = 1;

  message RequestedPathResult {
    string requested_path = 1;
    bool invalid_path = 2;
    repeated string result_path_list = 3;
  } 
}


message Add {
  bool allow_partial = 1;
  bool ignore_invalid_params = 2;
  repeated CreateObject create_obj = 3;
  
  message CreateObject {
    string obj_path = 1;
    string obj_alias = 2;
    map<string, string> param_setting_map = 3;
  }
}

message AddResp {
  repeated CreatedObjectResult created_obj_result = 1;
  
  message CreatedObjectResult {
    string requested_path = 1;
    OperationStatus oper_status = 2;
    ParameterErrorResults param_error_results = 3;
    CreatedParameterResults created_param_results = 4;
    
    message OperationStatus {
      fixed32 err_code = 1;
      string err_message = 2;
    }
    
    message ParameterErrorResults {
      repeated ParameterError param_err = 1;
    
      message ParameterError {
        string param_path = 1;
        string param_value = 2;
        fixed32 err_code = 3;
        string err_message = 4;
      }
    }
    
    message CreatedParameterResults {
      map<string, string> result_param_map = 1;
    }
  }
}


message Delete {
  bool allow_partial = 1;
  repeated string param_path = 2;
}

message DeleteResp {
  repeated DeletedObjectResult deleted_obj_result = 1;
  
  message DeletedObjectResult {
    string requested_path = 1;
    bool invalid_path = 2;
    bool missing_obj = 3;
  }
}


message Set {
  bool allow_partial = 1;
  bool ignore_invalid_params = 2;
  repeated UpdateObject update_obj = 3;
  
  message UpdateObject {
    string obj_path = 1;
    bool auto_create = 2;
    map<string, string> param_setting_map = 3;
  }
}

message SetResp {
  repeated UpdatedObjectResult updated_obj_result = 1;
  
  message UpdatedObjectResult {
    string requested_path = 1;
    OperationStatus oper_status = 2;
    ParameterErrorResults param_error_results = 3;
    UpdatedParameterResults updated_param_results = 4;
    
    message OperationStatus {
      fixed32 err_code = 1;
      string err_message = 2;
    }
    
    message ParameterErrorResults {
      repeated ParameterError param_err = 1;
    
      message ParameterError {
        string param_path = 1;
        string param_value = 2;
        fixed32 err_code = 3;
        string err_message = 4;
      }
    }
    
    message UpdatedParameterResults {
      map<string, string> result_param_map = 1;
    }
  }
}


message Operate {
  string command = 1;
  string command_key = 2;
  bool send_resp = 3;
  map<string, string> input_arg_map = 4;
}


message OperateResp {
  oneof operate_resp {
    string req_obj_path = 1;
    OutputArgs req_output_args = 2;
  }
  
  message OutputArgs {
    map<string, string> output_arg_map = 1;
  }
}


message Notify {
  string subscription_id = 1;
  bool send_resp = 2;
  oneof notification {        // NOTE: Bootstrap, Boot, and TransferComplete call all be caused outside of an operation
    Bootstrap bootstrap = 3;
    Boot boot = 4;
    ValueChange value_change = 5;
    ObjectCreation obj_creation = 6;
    ObjectDeletion obj_deletion = 7;
    Periodic periodic = 8;
    WakeUp wake_up = 9;
    Timer timer = 10;
    OperationComplete oper_complete = 11;
    TransferComplete xfer_complete = 12;
  }
  
  message Bootstrap {
    string command_key = 1;
    enum Cause {
      INITIAL = 0;
      LOCAL_FACTORY_RESET = 1;
      REMOTE_FACTORY_RESET = 2;
      CONTROLER_ADDRESS_CHANGE = 3;
    }
    Cause cause = 2;
    string caused_by = 3;     // Object associated with Command (LocalAgent,ExecutionEnv, etc.)  
    map<string, string> inform_param_map = 4;
  }
  
  message Boot {
    string command_key = 1;
    enum Cause {
      LOCAL_REBOOT = 0;
      REMOTE_REBOOT = 1;
    }
    Cause cause = 2;
    string caused_by = 3;     // Object associated with Command (LocalAgent,ExecutionEnv, etc.)  
    map<string, string> inform_param_map = 4;
  }
  
  message ValueChange {
    enum Cause {
      ACTIVE = 0;
      PASSIVE = 1;
    }
    Cause cause = 1;
    map<string, string> changed_param_map = 2;
  }
  
  message ObjectCreation {
    enum Cause {
      ACTIVE = 0;
      PASSIVE = 1;
    }
    Cause cause = 1;
    map<string, string> created_obj_map = 2;
  }
  
  message ObjectDeletion {
    enum Cause {
      ACTIVE = 0;
      PASSIVE = 1;
    }
    Cause cause = 1;
    map<string, string> deleted_obj_map = 2;
  }
  
  message Periodic {
    string caused_by = 1;     // Object associated with Command (LocalAgent,ExecutionEnv, etc.)  
  }
  
  message WakeUp {
    string caused_by = 1;     // Object associated with Command (LocalAgent,ExecutionEnv, etc.)  
  }
  
  message Timer {
    string caused_by = 1;     // Object associated with Command (LocalAgent,ExecutionEnv, etc.)  
    string command_key = 2;
  }
  
  message OperationComplete { // Replaces DiagnosticsComplete and SoftReset
    string command = 1;
    string command_key = 2;
    string caused_by = 3;     // Object associated with Command (LocalAgent,ExecutionEnv, etc.)  
    map<string, string> output_arg_map = 4;
  }
  
  message TransferComplete {
    string command_key = 1;
    TransferType xfer_type = 2;
    TransferFileType xfer_file_type = 3;
    string transfer_url = 4;
    string start_time = 5;
    string complete_time = 6;
    string caused_by = 7;     // Object associated with Command (LocalAgent,ExecutionEnv, etc.)  
    string operation_source = 8;  // Controller ID that caused the Transfer
    TransferError xfer_error = 9;

    enum TransferType {
      DOWNLOAD = 0;
      UPLOAD = 1;
      INSTALL = 2;
      UPDATE = 3;
      UNINSTALL = 4;
    }

    enum TransferFileType {   // Do we want to define this in the schema, kind of restricts where a file transfer operation can be placed and what it can do
      FIRMWARE_IMAGE = 0;
      SOFTWARE_BANK = 1;
      VENDOR_CONFIG_FILE = 2;
      VENDOR_LOG_FILE = 3;
      TONE_FILE = 4;
      RINGER_FILE = 5;
      DEPLOYMENT_UNIT = 6;
    }
    
    message TransferError {
      string err_code = 1;
      string err_msg = 2;
    }
  }
}


message NotifyResp {
}
